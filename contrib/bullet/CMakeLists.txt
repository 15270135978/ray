CMAKE_MINIMUM_REQUIRED(VERSION 2.4.3)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)

#this line has to appear before 'PROJECT' in order to be able to disable incremental linking
SET(MSVC_INCREMENTAL_DEFAULT ON)

PROJECT(BULLET_PHYSICS)
SET(BULLET_VERSION 2.82)

IF(COMMAND cmake_policy)
   CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

SET(USE_DOUBLE_PRECISION FALSE) # "Use double precision"
SET(USE_GRAPHICAL_BENCHMARK TRUE) # "Use Graphical Benchmark"
SET(USE_CUSTOM_VECTOR_MATH FALSE) # "Use custom vectormath library"

IF (USE_CUSTOM_VECTOR_MATH)
	ADD_DEFINITIONS(-DUSE_SYSTEM_VECTORMATH)
	IF(WIN32)
		SET (VECTOR_MATH_INCLUDE ${BULLET_PHYSICS_SOURCE_DIR}/src/vectormath/sse CACHE PATH "Vector Math library include path.")
	ELSE(WIN32)
		SET (VECTOR_MATH_INCLUDE ${BULLET_PHYSICS_SOURCE_DIR}/src/vectormath/scalar CACHE PATH "Vector Math library include path.")
	ENDIF(WIN32)
ENDIF(USE_CUSTOM_VECTOR_MATH)

IF (APPLE OR MSVC OR MINGW)
	SET(BUILD_MULTITHREADING FALSE) # "Use BulletMultiThreading"
ELSE()
	SET(BUILD_MULTITHREADING FALSE) # "Use BulletMultiThreading"
ENDIF()

IF (BUILD_MULTITHREADING)
	SET(USE_MULTITHREADED_BENCHMARK OFF) # "Use Multithreaded Benchmark"
	IF (USE_MULTITHREADED_BENCHMARK)
		ADD_DEFINITIONS(-DUSE_PARALLEL_SOLVER_BENCHMARK -DUSE_PARALLEL_DISPATCHER_BENCHMARK)
	ENDIF(USE_MULTITHREADED_BENCHMARK)

	IF (MSVC OR APPLE)
		SET(BUILD_MINICL_OPENCL_DEMOS FALSE) # "Build OpenCL demos for MiniCL (Generic CPU)"
	ELSE()
		SET(BUILD_MINICL_OPENCL_DEMOS FALSE) # "Build OpenCL demos for MiniCL (Generic CPU)"
	ENDIF(MSVC OR APPLE)

	IF(MSVC)

		FIND_PATH(AMD_OPENCL_BASE_DIR include/CL/cl.h PATH  $ENV{ATISTREAMSDKROOT} $ENV{AMDAPPSDKROOT} )
		IF(AMD_OPENCL_BASE_DIR)
			#AMD adds an extras slash at the end of the ATISTREAMSDKROOT variable
			SET(AMD_OPENCL_INCLUDES ${AMD_OPENCL_BASE_DIR}/include )
			MESSAGE("AMD OPENCL SDK FOUND")
			IF (CMAKE_CL_64)
				SET(CMAKE_ATISTREAMSDK_LIBPATH 		${AMD_OPENCL_BASE_DIR}/lib/x86_64 )
			ELSE(CMAKE_CL_64)
				SET(CMAKE_ATISTREAMSDK_LIBPATH		${AMD_OPENCL_BASE_DIR}/lib/x86 )
			ENDIF(CMAKE_CL_64)
			SET(CMAKE_ATISTREAMSDK_LIBRARY		${CMAKE_ATISTREAMSDK_LIBPATH}/OpenCL.lib )
			SET(BUILD_AMD_OPENCL_DEMOS FALSE) #"Build OpenCL demos for AMD (GPU or CPU)"
			IF (CMAKE_CL_64)
				SET(CMAK_GLEW_LIBRARY
					${BULLET_PHYSICS_SOURCE_DIR}/Glut/glew64s.lib		)
			ELSE(CMAKE_CL_64)
				SET(CMAK_GLEW_LIBRARY		${BULLET_PHYSICS_SOURCE_DIR}/Glut/glew32s.lib		)
			ENDIF(CMAKE_CL_64)
		ELSE()
			SET(BUILD_AMD_OPENCL_DEMOS OFF) # "Build OpenCL demos for AMD (GPU or CPU)"
		ENDIF()

		FIND_PATH(INTEL_OPENCL_BASE_DIR include/CL/cl.h PATH  $ENV{INTELOCLSDKROOT} )
		IF(INTEL_OPENCL_BASE_DIR)
			SET(INTEL_OPENCL_INCLUDES ${INTEL_OPENCL_BASE_DIR}/include )
			MESSAGE("INTEL OPENCL SDK FOUND")
			MESSAGE(${INTEL_OPENCL_INCLUDES})
			IF (CMAKE_CL_64)
				SET(CMAKE_INTELOCLSDK_LIBPATH 		${INTEL_OPENCL_BASE_DIR}/lib/x64 )
			ELSE(CMAKE_CL_64)
				SET(CMAKE_INTELOCLSDK_LIBPATH		${INTEL_OPENCL_BASE_DIR}/lib/x86 )
			ENDIF(CMAKE_CL_64)
			SET(INTEL_OPENCL_LIBRARIES ${CMAKE_INTELOCLSDK_LIBPATH}/OpenCL.lib)
			SET(BUILD_INTEL_OPENCL_DEMOS OFF) # "Build OpenCL demos for Intel (CPU)"
		ELSE()
			SET(BUILD_INTEL_OPENCL_DEMOS OFF) # "Build OpenCL demos for Intel (CPU)"
		ENDIF()

		FIND_PATH(NVIDIA_OPENCL_BASE_DIR include/CL/cl.h PATH  $ENV{CUDA_PATH} )
		IF(NVIDIA_OPENCL_BASE_DIR)
			SET(NVIDIA_OPENCL_INCLUDES ${NVIDIA_OPENCL_BASE_DIR}/include )
			MESSAGE("NVIDIA OPENCL SDK FOUND")
			MESSAGE(${NVIDIA_OPENCL_INCLUDES})
			IF (CMAKE_CL_64)
				SET(CMAKE_NVSDKCOMPUTE_LIBPATH		${NVIDIA_OPENCL_BASE_DIR}/lib/x64 )
			ELSE(CMAKE_CL_64)
				SET(CMAKE_NVSDKCOMPUTE_LIBPATH		${NVIDIA_OPENCL_BASE_DIR}/lib/Win32	)
			ENDIF(CMAKE_CL_64)
			SET(NVIDIA_OPENCL_LIBRARIES		${CMAKE_NVSDKCOMPUTE_LIBPATH}/OpenCL.lib)

			SET(BUILD_NVIDIA_OPENCL_DEMOS FALSE) # "Build OpenCL demos for NVidia (GPU)"
		ELSE()
			SET(BUILD_NVIDIA_OPENCL_DEMOS FALSE) # "Build OpenCL demos for NVidia (GPU)"
		ENDIF()
	ELSE(MSVC)
		FIND_PATH(AMD_OPENCL_BASE_DIR include/CL/cl.h PATH  $ENV{ATISTREAMSDKROOT} $ENV{AMDAPPSDKROOT} )
		IF(AMD_OPENCL_BASE_DIR)
			#AMD adds an extras slash at the end of the ATISTREAMSDKROOT variable
			SET(AMD_OPENCL_INCLUDES ${AMD_OPENCL_BASE_DIR}/include )
			MESSAGE("AMD OPENCL SDK FOUND")
			MESSAGE(${AMD_OPENCL_INCLUDES})
			IF (CMAKE_CL_64)
				SET(CMAKE_ATISTREAMSDK_LIBPATH 		${AMD_OPENCL_BASE_DIR}/lib/x86_64 )
			ELSE(CMAKE_CL_64)
				SET(CMAKE_ATISTREAMSDK_LIBPATH		${AMD_OPENCL_BASE_DIR}/lib/x86 )
			ENDIF(CMAKE_CL_64)
			SET(BUILD_AMD_OPENCL_DEMOS FALSE) # "Build OpenCL demos for AMD (GPU or CPU)"
			SET(CMAKE_ATISTREAMSDK_LIBRARY		OpenCL )
		ELSE()
			SET(BUILD_AMD_OPENCL_DEMOS FALSE) # "Build OpenCL demos for AMD (GPU or CPU)"
		ENDIF(AMD_OPENCL_BASE_DIR)

    FIND_PATH(INTEL_OPENCL_INCLUDES CL/cl.h)
    FIND_PATH(INTEL_OPENCL_ICD_CFG intelocl64.icd /etc/OpenCL/vendors)
    FIND_LIBRARY(INTEL_OPENCL_LIBRARIES OpenCL PATH /usr/lib64)
    IF (INTEL_OPENCL_INCLUDES AND INTEL_OPENCL_LIBRARIES AND INTEL_OPENCL_ICD_CFG)
            MESSAGE("INTEL OPENCL SDK FOUND")
            MESSAGE(${INTEL_OPENCL_LIBRARIES})
            SET(BUILD_INTEL_OPENCL_DEMOS FALSE) # "Build OpenCL demos for Intel (CPU)"
    ELSE ()
            MESSAGE("INTEL OPENCL NOT FOUND")
            SET(BUILD_INTEL_OPENCL_DEMOS FALSE) # "Build OpenCL demos for Intel (CPU)"
    ENDIF ()


	FIND_PATH(NVIDIA_OPENCL_INCLUDES CL/cl.h)
    FIND_PATH(NVIDIA_OPENCL_ICD_CFG nvidia.icd /etc/OpenCL/vendors)
    FIND_LIBRARY(NVIDIA_OPENCL_LIBRARIES OpenCL PATH /usr/lib64 /usr/local/lib)
    IF (NVIDIA_OPENCL_INCLUDES AND NVIDIA_OPENCL_LIBRARIES AND NVIDIA_OPENCL_ICD_CFG)
                MESSAGE("NVidia OPENCL FOUND")
			MESSAGE(${NVIDIA_OPENCL_LIBRARIES})
			SET(BUILD_NVIDIA_OPENCL_DEMOS FALSE) # "Build OpenCL demos for NVidia (GPU)"
		ELSE ()
	                MESSAGE("NVidia OPENCL NOT FOUND")
			SET(BUILD_NVIDIA_OPENCL_DEMOS FALSE) # "Build OpenCL demos for NVidia (GPU)"
		ENDIF ()
	ENDIF(MSVC)
ENDIF(BUILD_MULTITHREADING)

IF(MSVC)
	IF (CMAKE_CL_64)
	  ADD_DEFINITIONS(-D_WIN64)
	ENDIF()
ENDIF(MSVC)

IF (WIN32)

SET(INTERNAL_CREATE_MSVC_RELATIVE_PATH_PROJECTFILES FALSE) # "Create MSVC projectfiles with relative paths"
SET(INTERNAL_ADD_POSTFIX_EXECUTABLE_NAMES FALSE) # "Add MSVC postfix for executable names (_Debug)"
SET(INTERNAL_UPDATE_SERIALIZATION_STRUCTURES FALSE) # "Internal update serialization structures"

IF (INTERNAL_CREATE_MSVC_RELATIVE_PATH_PROJECTFILES)
	SET(CMAKE_SUPPRESS_REGENERATION  1)
	SET(CMAKE_USE_RELATIVE_PATHS 1)
ENDIF(INTERNAL_CREATE_MSVC_RELATIVE_PATH_PROJECTFILES)

ENDIF (WIN32)

SET(BUILD_CPU_DEMOS FALSE) # "Build original Bullet CPU demos"

IF (INTERNAL_UPDATE_SERIALIZATION_STRUCTURES)
ADD_DEFINITIONS( -DBT_INTERNAL_UPDATE_SERIALIZATION_STRUCTURES)
ENDIF (INTERNAL_UPDATE_SERIALIZATION_STRUCTURES)

IF (USE_DOUBLE_PRECISION)
ADD_DEFINITIONS( -DBT_USE_DOUBLE_PRECISION)
SET( BULLET_DOUBLE_DEF "-DBT_USE_DOUBLE_PRECISION")
ENDIF (USE_DOUBLE_PRECISION)

IF(USE_GRAPHICAL_BENCHMARK)
ADD_DEFINITIONS( -DUSE_GRAPHICAL_BENCHMARK)
ENDIF (USE_GRAPHICAL_BENCHMARK)

IF (WIN32)
	ADD_DEFINITIONS( -D_IRR_STATIC_LIB_ )
	ADD_DEFINITIONS( -D_CRT_SECURE_NO_WARNINGS )
	ADD_DEFINITIONS( -D_CRT_SECURE_NO_DEPRECATE )
	ADD_DEFINITIONS( -D_SCL_SECURE_NO_WARNINGS )
ENDIF()

IF(COMMAND cmake_policy)
   cmake_policy(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

SUBDIRS(src)