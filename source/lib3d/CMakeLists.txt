PROJECT(lib3d)

SET(LIB_NAME lib3d)

IF(NOT BUILD_PLATFORM_ANDROID)
    OPTION(BUILD_OPENGL_CORE "ON for debug or OFF for release" ON)
ENDIF()

IF(BUILD_PLATFORM_WINDOWS OR BUILD_PLATFORM_ANDROID)
    OPTION(BUILD_OPENGL_ES2 "ON for debug or OFF for release" OFF)
    OPTION(BUILD_OPENGL_ES3 "ON for debug or OFF for release" OFF)
ENDIF()

IF(NOT BUILD_PLATFORM_APPLE)
    OPTION(BUILD_VULKAN "ON for debug or OFF for release" OFF)
ENDIF()

IF(LIBRARY_OUT_NAME MATCHES "64")
    SET(DEFAULT_LINK_LIBRARY 2)
ELSE()
    SET(DEFAULT_LINK_LIBRARY 1)
ENDIF()

SET(BUILD_OPENGL_ES_LIB ${DEFAULT_LINK_LIBRARY} CACHE STRING
    "Specify the platform. Possible values:
    1 - AMD
    2 - Mali
    3 - PowerVR")

IF(BUILD_OPENGL_ES_LIB EQUAL 1)
    ADD_DEFINITIONS(-D__AMD__)
ELSEIF(BUILD_OPENGL_ES_LIB EQUAL 2)
    ADD_DEFINITIONS(-D__Mali__)
ELSEIF(BUILD_OPENGL_ES_LIB EQUAL 3)
    ADD_DEFINITIONS(-D__PowerVR__)
ENDIF()

IF(BUILD_OPENGL_ES2 OR BUILD_OPENGL_ES3)
    SET(BUILD_OPENGL_ES TRUE)
    ADD_DEFINITIONS(-D_BUILD_OPENGL_ES)
    IF(BUILD_OPENGL_ES2)
        ADD_DEFINITIONS(-D_BUILD_OPENGL_ES2)
    ENDIF()
    IF(BUILD_OPENGL_ES3)
        ADD_DEFINITIONS(-D_BUILD_OPENGL_ES3)
    ENDIF()
ENDIF()

IF(BUILD_OPENGL_CORE)
    ADD_DEFINITIONS(-D_BUILD_OPENGL)
    ADD_DEFINITIONS(-D_BUILD_OPENGL_CORE)

    IF(NOT BUILD_OPENGL_ES)
        ADD_DEFINITIONS(-DGLEW_STATIC)
    ENDIF()

    INCLUDE_DIRECTORIES(${DEPENDENCIES_PATH}/glew/include)
ENDIF()

IF(BUILD_OPENGL_ES)
    INCLUDE_DIRECTORIES(${DEPENDENCIES_PATH}/gles/include)
    INCLUDE_DIRECTORIES(${DEPENDENCIES_PATH}/glsl-optimizer/src)
ENDIF()

IF(BUILD_VULKAN)
    ADD_DEFINITIONS(-D_BUILD_VULKAN)

    INCLUDE_DIRECTORIES(${DEPENDENCIES_PATH}/glslang)

    IF(BUILD_PLATFORM_WINDOWS)
        INCLUDE_DIRECTORIES($ENV{VK_SDK_PATH}/include)
        IF(LIBRARY_OUT_NAME MATCHES "64")
            SET(VK_LINK_DIRECTORIES $ENV{VK_SDK_PATH}/Bin)
        ELSE()
            SET(VK_LINK_DIRECTORIES $ENV{VK_SDK_PATH}/Bin32)
        ENDIF()
        LINK_DIRECTORIES(${VK_LINK_DIRECTORIES})
    ELSEIF(BUILD_PLATFORM_LINUX)
        INCLUDE_DIRECTORIES(${DEPENDENCIES_PATH}/vulkan/include)
        LINK_DIRECTORIES(${DEPENDENCIES_PATH}/vulkan/lib)
    ENDIF()
ENDIF()

SET(HEADER_PATH ${CMAKE_SOURCE_DIR}/include/ray)
SET(SOURCE_PATH ${CMAKE_SOURCE_DIR}/source/lib3d)

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/OpenGL")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/OpenGL Core")
INCLUDE_DIRECTORIES("${DEPENDENCIES_PATH}/HLSLCrossCompiler/include")

SET(RENDERER_CORE
    ${HEADER_PATH}/graphics_child.h
    ${SOURCE_PATH}/graphics_child.cpp
    ${HEADER_PATH}/graphics_context.h
    ${SOURCE_PATH}/graphics_context.cpp
    ${HEADER_PATH}/graphics_command.h
    ${SOURCE_PATH}/graphics_command.cpp
    ${HEADER_PATH}/graphics_data.h
    ${SOURCE_PATH}/graphics_data.cpp
    ${HEADER_PATH}/graphics_descriptor.h
    ${SOURCE_PATH}/graphics_descriptor.cpp
    ${HEADER_PATH}/graphics_device.h
    ${SOURCE_PATH}/graphics_device.cpp
    ${HEADER_PATH}/graphics_device_property.h
    ${SOURCE_PATH}/graphics_device_property.cpp
    ${HEADER_PATH}/graphics_input_layout.h
    ${SOURCE_PATH}/graphics_input_layout.cpp
    ${HEADER_PATH}/graphics_pipeline.h
    ${SOURCE_PATH}/graphics_pipeline.cpp
    ${HEADER_PATH}/graphics_resource.h
    ${SOURCE_PATH}/graphics_resource.cpp
    ${HEADER_PATH}/graphics_sampler.h
    ${SOURCE_PATH}/graphics_sampler.cpp
    ${HEADER_PATH}/graphics_semaphore.h
    ${SOURCE_PATH}/graphics_semaphore.cpp
    ${HEADER_PATH}/graphics_shader.h
    ${SOURCE_PATH}/graphics_shader.cpp
    ${HEADER_PATH}/graphics_state.h
    ${SOURCE_PATH}/graphics_state.cpp
    ${HEADER_PATH}/graphics_swapchain.h
    ${SOURCE_PATH}/graphics_swapchain.cpp
    ${HEADER_PATH}/graphics_system.h
    ${SOURCE_PATH}/graphics_system.cpp
    ${HEADER_PATH}/graphics_texture.h
    ${SOURCE_PATH}/graphics_texture.cpp
    ${HEADER_PATH}/graphics_types.h
    ${HEADER_PATH}/graphics_framebuffer.h
    ${SOURCE_PATH}/graphics_framebuffer.cpp
    ${HEADER_PATH}/graphics_variant.h
    ${SOURCE_PATH}/graphics_variant.cpp
)
SOURCE_GROUP("Common" FILES ${RENDERER_CORE})

IF(BUILD_OPENGL_CORE)
    FILE(GLOB RENDERER_OGL_HEADER "OpenGL/*.h")
    FILE(GLOB RENDERER_OGL_SOURCE "OpenGL/*.cpp")
    FILE(GLOB RENDERER_OGL_CORE_HEADER "OpenGL Core/*.h")
    FILE(GLOB RENDERER_OGL_CORE_SOURCE "OpenGL Core/*.cpp")

	SET(RENDERER_OGL ${RENDERER_OGL_HEADER} ${RENDERER_OGL_SOURCE})
    SET(RENDERER_OGL_CORE ${RENDERER_OGL_CORE_HEADER} ${RENDERER_OGL_CORE_SOURCE})

    IF(BUILD_PLATFORM_APPLE)
        FILE(GLOB RENDERER_OGL_NSGL "OpenGL/*.mm")
        SET(RENDERER_OGL ${RENDERER_OGL} ${RENDERER_OGL_NSGL})
    ENDIF()

    SOURCE_GROUP("OpenGL" FILES ${RENDERER_OGL})
    SOURCE_GROUP("OpenGL Core" FILES ${RENDERER_OGL_CORE})
ENDIF()

IF(BUILD_OPENGL_ES2 AND BUILD_MUTILTHREAD_DLL)
    FILE(GLOB RENDERER_EGL2 "OpenGL ES2/*.*")
    SOURCE_GROUP("OpenGL ES2" FILES ${RENDERER_EGL2})
ENDIF()

IF(BUILD_OPENGL_ES3 AND BUILD_MUTILTHREAD_DLL)
    FILE(GLOB RENDERER_EGL3 "OpenGL ES3/*.*")
    SOURCE_GROUP("OpenGL ES3" FILES ${RENDERER_EGL3})
ENDIF()

IF(BUILD_VULKAN AND BUILD_MUTILTHREAD_DLL)
    FILE(GLOB RENDERER_VULKAN "Vulkan/*.*")
    SOURCE_GROUP("Vulkan" FILES ${RENDERER_VULKAN})
ENDIF()

SET(RENDERER_LIST ${RENDERER_CORE})

IF(BUILD_OPENGL_CORE)
    SET(RENDERER_LIST ${RENDERER_LIST} ${RENDERER_OGL} ${RENDERER_OGL_CORE})
ENDIF()

IF(BUILD_OPENGL_ES2 AND BUILD_MUTILTHREAD_DLL)
    SET(RENDERER_LIST ${RENDERER_LIST} ${RENDERER_EGL2})
ENDIF()

IF(BUILD_OPENGL_ES3 AND BUILD_MUTILTHREAD_DLL)
    SET(RENDERER_LIST ${RENDERER_LIST} ${RENDERER_EGL3})
ENDIF()

IF(BUILD_VULKAN AND BUILD_MUTILTHREAD_DLL)
    SET(RENDERER_LIST ${RENDERER_LIST} ${RENDERER_VULKAN})
ENDIF()

IF(BUILD_PLATFORM_APPLE)
    SET_SOURCE_FILES_PROPERTIES(${RENDERER_LIST} PROPERTIES LANGUAGE CXX)
ENDIF()

ADD_LIBRARY(${LIB_NAME} SHARED ${RENDERER_LIST})

TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE libplatform)
TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE libHLSLcc)

IF(BUILD_PLATFORM_WINDOWS)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE opengl32)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE glew)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE d3dcompiler)

    IF(BUILD_OPENGL_ES)
        TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE libEGL)
        TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE libGLESv2)
        TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE glsl_optimizer)
    ENDIF()
ELSEIF(BUILD_PLATFORM_ANDROID)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE m)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE EGL)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE GLESv2)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE GLESv3)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE glsl_optimizer)
ELSEIF(BUILD_PLATFORM_LINUX)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE GL)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE X11)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE glew)
ELSEIF(BUILD_PLATFORM_APPLE)
    FIND_LIBRARY(COCOA_FRAMEWORK Cocoa)
    FIND_LIBRARY(OPENGL_FRAMEWORK OpenGL)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE ${COCOA_FRAMEWORK})
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE ${OPENGL_FRAMEWORK})
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE glew)
ENDIF()

IF(BUILD_VULKAN)
    IF(BUILD_PLATFORM_WINDOWS)
        TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE vulkan-1.lib)
    ELSEIF(BUILD_PLATFORM_LINUX)
        TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE vulkan)
    ENDIF()
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE SPIRV)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE glslang)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE HLSL)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE OGLCompiler)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE OSDependent)
ENDIF()

SET_TARGET_ATTRIBUTE(${LIB_NAME} "core")