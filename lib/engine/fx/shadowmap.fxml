<?xml version="1.0"?>
<effect language="hlsl">
    <include name="sys:fx/Gbuffer.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <parameter name="offset[4]" type="float[]"/>
    <parameter name="weight[3]" type="float[]"/>
    <parameter name="texSource" type="texture2D" />
    <parameter name="texSourceSizeInv" type="float2"/>
    <parameter name="clipConstant" type="float4" />
    <parameter name="matModelViewProject" type="float4x4" semantic="matModelViewProject"/>
    <shader>
        <![CDATA[
             void ConvLinearDepthVS(
                in float4 Position : POSITION,
                out float4 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord = PosToCoord(Position);
            }

            float ConvOrthoLinearDepthPS(in float4 coord : TEXCOORD0) : SV_Target0
            {
                return linearDepthOrthoLH(clipConstant.xy, texSource.Sample(LinearClamp, coord.xy).r);
            }

            float ConvPerspectiveFovLinearDepthPS(in float4 coord : TEXCOORD0) : SV_Target0
            {
                return linearDepthPerspectiveFovLH(clipConstant.xy, texSource.Sample(LinearClamp, coord.xy).r);
            }

            void BlurXVS(
                in float4 Position : POSITION,
                out float4 oTexcoord0 : TEXCOORD0,
                out float4 oTexcoord1 : TEXCOORD1,
                out float4 oTexcoord2 : TEXCOORD2,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord0.xy = PosToCoord(Position.xy);
                oTexcoord1 = oTexcoord0.xyxy + float4(float2(offset[0]*texSourceSizeInv.x, 0), float2(offset[2]*texSourceSizeInv.y, 0));
                oTexcoord2 = oTexcoord0.xyxy + float4(float2(offset[1]*texSourceSizeInv.x, 0), float2(offset[3]*texSourceSizeInv.y, 0));
            }

            void BlurYVS(
                in float4 Position : POSITION,
                out float4 oTexcoord0 : TEXCOORD0,
                out float4 oTexcoord1 : TEXCOORD1,
                out float4 oTexcoord2 : TEXCOORD2,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord0.xy = PosToCoord(Position.xy);
                oTexcoord1 = oTexcoord0.xyxy + float4(float2(0, offset[0]*texSourceSizeInv.x), float2(0, offset[2]*texSourceSizeInv.y));
                oTexcoord2 = oTexcoord0.xyxy + float4(float2(0, offset[1]*texSourceSizeInv.x), float2(0, offset[3]*texSourceSizeInv.y));
            }

            float ConvOrthoLinearDepthBlurXPS(
                in float4 coord0 : TEXCOORD0,
                in float4 coord1 : TEXCOORD1,
                in float4 coord2 : TEXCOORD2) : SV_Target0
            {
                float shadow = texSource.Sample(LinearClamp, coord0.xy).r * weight[0];
                shadow += texSource.Sample(LinearClamp, coord1.xy).r * weight[1];
                shadow += texSource.Sample(LinearClamp, coord1.zw).r * weight[1];
                shadow += texSource.Sample(LinearClamp, coord2.xy).r * weight[2];
                shadow += texSource.Sample(LinearClamp, coord2.zw).r * weight[2];
                return linearDepthOrthoLH(clipConstant.xy, shadow);
            }

            float ConvPerspectiveFovLinearDepthBlurXPS(
                in float4 coord0 : TEXCOORD0,
                in float4 coord1 : TEXCOORD1,
                in float4 coord2 : TEXCOORD2) : SV_Target0
            {
                float shadow = texSource.Sample(LinearClamp, coord0.xy).r * weight[0];
                shadow += texSource.Sample(LinearClamp, coord1.xy).r * weight[1];
                shadow += texSource.Sample(LinearClamp, coord1.zw).r * weight[1];
                shadow += texSource.Sample(LinearClamp, coord2.xy).r * weight[2];
                shadow += texSource.Sample(LinearClamp, coord2.zw).r * weight[2];
                return linearDepthPerspectiveFovLH(clipConstant.xy, shadow);
            }

            float BlurYPS(
                in float4 coord0 : TEXCOORD0,
                in float4 coord1 : TEXCOORD1,
                in float4 coord2 : TEXCOORD2) : SV_Target0
            {
                float shadow = texSource.Sample(LinearClamp, coord0.xy).r * weight[0];
                shadow += texSource.Sample(LinearClamp, coord1.xy).r * weight[1];
                shadow += texSource.Sample(LinearClamp, coord1.zw).r * weight[1];
                shadow += texSource.Sample(LinearClamp, coord2.xy).r * weight[2];
                shadow += texSource.Sample(LinearClamp, coord2.zw).r * weight[2];
                return shadow;
            }

            void LogBlurXVS(
                in float4 Position : POSITION,
                out float4 oTexcoord0 : TEXCOORD0,
                out float4 oTexcoord1 : TEXCOORD1,
                out float4 oTexcoord2 : TEXCOORD2,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord0.xy = PosToCoord(Position.xy);
                oTexcoord1 = oTexcoord0.xyxy + float4(float2(offset[0]*texSourceSizeInv.x, 0), float2(-offset[0]*texSourceSizeInv.y, 0));
                oTexcoord2 = oTexcoord0.xyxy + float4(float2(offset[1]*texSourceSizeInv.x, 0), float2(-offset[1]*texSourceSizeInv.y, 0));
            }

            void LogBlurYVS(
                in float4 Position : POSITION,
                out float4 oTexcoord0 : TEXCOORD0,
                out float4 oTexcoord1 : TEXCOORD1,
                out float4 oTexcoord2 : TEXCOORD2,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord0.xy = PosToCoord(Position.xy);
                oTexcoord1 = oTexcoord0.xyxy + float4(float2(0, offset[0]*texSourceSizeInv.x), float2(0, -offset[0]*texSourceSizeInv.y));
                oTexcoord2 = oTexcoord0.xyxy + float4(float2(0, offset[1]*texSourceSizeInv.x), float2(0, -offset[1]*texSourceSizeInv.y));
            }

            float LogBlurXPS(
                in float4 coord0 : TEXCOORD0,
                in float4 coord1 : TEXCOORD0,
                in float4 coord2 : TEXCOORD0) : SV_Target0
            {
                float4 coord[2] = { coord1, coord2 };

                float d0 = linearDepthPerspectiveFovLH(clipConstant.xy, texSource.Sample(LinearClamp, coord0.xy).r);
                float d1 = 0;

                for (int i = 0; i < 2; ++i)
                {
                    float d2 = linearDepthPerspectiveFovLH(clipConstant.xy, texSource.Sample(LinearClamp, coord[i].xy).r);
                    float d3 = linearDepthPerspectiveFovLH(clipConstant.xy, texSource.Sample(LinearClamp, coord[i].zw).r);

                    d1 += (exp(clipConstant.z * (d2 - d0)) + exp(clipConstant.z * (d3 - d0))) * weight[i];
                }

                return clipConstant.z * d0 + log(d1);
            }

            float LogBlurYPS(
                in float4 coord0 : TEXCOORD0,
                in float4 coord1 : TEXCOORD0,
                in float4 coord2 : TEXCOORD0) : SV_Target0
            {
                float4 coord[2] = { coord1, coord2 };

                float d0 = texSource.Sample(LinearClamp, coord0.xy).r;
                float d1 = 0;

                for (int i = 0; i < 2; ++i)
                {
                    float d2 = texSource.Sample(LinearClamp, coord[i].xy).r;
                    float d3 = texSource.Sample(LinearClamp, coord[i].zw).r;

                    d1 += (exp(d2 - d0) + exp(d3 - d0)) * weight[i];
                }

                return d0 + log(d1);
            }
        ]]>
    </shader>
    <technique name="ConvOrthoLinearDepth">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="ConvLinearDepthVS"/>
            <state name="fragment" value="ConvOrthoLinearDepthPS" />
            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="ConvPerspectiveFovLinearDepth">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="ConvLinearDepthVS"/>
            <state name="fragment" value="ConvPerspectiveFovLinearDepthPS" />
            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="ConvOrthoLinearDepthBlurX">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>

            <state name="vertex" value="BlurXVS"/>
            <state name="fragment" value="ConvOrthoLinearDepthBlurXPS" />

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="ConvPerspectiveFovLinearDepthBlurX">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>

            <state name="vertex" value="BlurXVS"/>
            <state name="fragment" value="ConvPerspectiveFovLinearDepthBlurXPS" />

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="BlurY">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>

            <state name="vertex" value="BlurYVS"/>
            <state name="fragment" value="BlurYPS" />

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="LogBlurX">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>

            <state name="vertex" value="BlurXVS"/>
            <state name="fragment" value="LogBlurXPS" />

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="LogBlurY">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>

            <state name="vertex" value="BlurYVS"/>
            <state name="fragment" value="LogBlurYPS" />

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
</effect>