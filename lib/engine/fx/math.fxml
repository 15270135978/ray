<?xml version="1.0"?>
<effect version="1270" language="hlsl">
    <shader>
    	<![CDATA[
		#define InvLog2 3.32192809489f
		#define InvPIE 0.318309886142f
		#define InvPIE8 0.039788735767f
		#define InvPIE4 0.079577471535f

		#define PI 3.1415926535f
		#define PI_2 (3.1415926535f * 2.0f)

		#define MIDPOINT_8_BIT (127.0f / 255.0f)
		
		float  pow2(float x)  { return x * x; }
		float2 pow2(float2 x) { return x * x; }
		float3 pow2(float3 x) { return x * x; }
		float4 pow2(float4 x) { return x * x; }

		float  pow5(float x)  { float  xx = x * x; return xx * xx * x; }
		float2 pow5(float2 x) { float2 xx = x * x; return xx * xx * x; }
		float3 pow5(float3 x) { float3 xx = x * x; return xx * xx * x; }
		float4 pow5(float4 x) { float4 xx = x * x; return xx * xx * x; }

		float sum(float2 v) { return dot(v, 1.0); }
		float sum(float3 v) { return dot(v, 1.0); }
		float sum(float4 v) { return dot(v, 1.0); }

		float  madd(float v , float t1 , float t2 ) { return v * t1 + t2; }
		float2 madd(float2 v, float2 t1, float2 t2) { return v * t1 + t2; }
		float3 madd(float3 v, float3 t1, float3 t2) { return v * t1 + t2; }
		float4 madd(float4 v, float4 t1, float4 t2) { return v * t1 + t2; }

		float length2(float2 v) { return dot(v, v); }
		float length2(float3 v) { return dot(v, v); }
		float length2(float4 v) { return dot(v, v); }

		float3 srgb2linear(float3 rgb)
		{
			// apply gamma correction using exact sRGB curve
			const float ALPHA = 0.055f;
			return rgb < 0.04045f ? rgb / 12.92f : pow((max(rgb,1e-5) + ALPHA) / (1 + ALPHA), 2.4f);
		}

		float3 srgb2linear_fast(float3 rgb)
		{
			return pow(max(rgb, 1e-6), 2.2);
		}

		float3 linear2srgb(float3 srgb)
		{
			// apply gamma correction using exact sRGB curve
			const float ALPHA = 0.055f;
			return srgb < 0.0031308f ? 12.92f * srgb : (1 + ALPHA) * pow(max(srgb,1e-5), 1 / 2.4f) - ALPHA;
		}

		float4 srgb2linear(float4 c)
		{
			return float4(srgb2linear(c.rgb), c.a);
		}

		float4 srgb2linear_fast(float4 c)
		{
			return float4(srgb2linear_fast(c.rgb), c.a);
		}

		float4 linear2srgb(float4 c)
		{
			return float4(linear2srgb(c.rgb), c.a);
		}

		float luminance(float3 rgb)
		{
			const float3 lumfact = float3(0.2126f, 0.7152f, 0.0722f);
			return dot(rgb, lumfact);
		}

		// https://dl.dropboxusercontent.com/u/16861957/gdc2015_rendering_the_world_of_far_cry_4.pdf
		float4 TangentSpaceToQuaternion(float3 tangent, float3 binormal, float3 normal)
		{
			float4 quat;
			quat.x = normal.y - binormal.z;
			quat.y = tangent.z - normal.x;
			quat.z = binormal.x - tangent.y;
			quat.w = 1.0f + tangent.x + binormal.y + normal.z;
			return normalize(quat);
		}

		float3 QuaternionToTangentSpace(float4 quat)
		{
			return
				float3( 1.0f,  0.0f,  0.0f) +
				float3(-2.0f,  2.0f,  2.0f) * quat.y * quat.yxw +
				float3(-2.0f, -2.0f,  2.0f) * quat.z * quat.zwx;
		}

		float3 QuaternionToTangentSpaceBinormal(float4 quat)
		{
			return
				float3( 0.0f,  1.0f,  0.0f) +
				float3( 2.0f, -2.0f,  2.0f) * quat.z * quat.wzy +
				float3( 2.0f, -2.0f, -2.0f) * quat.x * quat.yxw;
		}

		float3 QuaternionToTangentSpaceNormal(float4 quat)
		{
			return
				float3( 0.0f,  0.0f,  1.0f) +
				float3( 2.0f,  2.0f, -2.0f) * quat.x * quat.zwx +
				float3(-2.0f,  2.0f, -2.0f) * quat.y * quat.wzy;
		}

		// http://www.crytek.com/download/izfrey_siggraph2011.pdf
		float3 QuaternionTransform(float3 v, float4 quat)
		{
			return normalize(v + cross(quat.xyz, cross(quat.xyz, v) + quat.w * v) * 2);
		}

		float3 QuaternionToTangent(float4 quat)
		{
			return QuaternionTransform(float3(1, 0, 0), quat);
		}

		float3 QuaternionToBinormal(float4 quat)
		{
			return QuaternionTransform(float3(0, 1, 0), quat);
		}

		float3 QuaternionToNormal(float4 quat)
		{
			return QuaternionTransform(float3(0, 0, 1), quat);
		}

		float4 SmoothCurve(float4 x)
		{
			return x * x * (3.0 - 2.0 * x);
		}

		float4 TriangleWave(float4 x)
		{
			return abs(frac(x + 0.5) * 2.0 - 1.0);
		}

		float4 SmoothTriangleWave(float4 x)
		{
			return SmoothCurve(TriangleWave(x));
		}

		float3 PremultipliedAlpha(float4 color)
		{
			return color.rgb * color.a;
		}

		float3 PremultipliedBlend(float3 src, float3 dst, float alpha)
		{
			return src * alpha + dst;
		}

		float fastAcos(float x)
		{
			return sqrt(1.0 - x) * (1.5707963267948966192313216916398f + x * (-0.213300989f + x * (0.077980478f + x * -0.02164095f)));
		}

        float2 PosToCoord(float2 Position)
        {
            return mad(Position, 0.5, 0.5);
        }

        float3 PosToCoord(float3 Position)
        {
            return mad(Position, 0.5, 0.5);
        }

        float4 PosToCoord(float4 Position)
        {
            return mad(Position, 0.5, 0.5);
        }

        float2 CoordToPos(float2 coord)
        {
            return mad(coord, 2.0, -1.0);
        }

        float3 CoordToPos(float3 coord)
        {
            return mad(coord, 2.0, -1.0);
        }

        float4 CoordToPos(float4 coord)
        {
            return mad(coord, 2.0, -1.0);
        }

        float linearDepthOrthoLH(float2 clipConstant, float depth)
        {
            // clipConstant.x = znear;
            // clipConstant.y = zfar - znear;
            return clipConstant.x + clipConstant.y * depth;
        }

        float linearDepthPerspectiveFovLH(float2 clipConstant, float depth)
        {
            // clipConstant.x = _znear * (_zfar / (_zfar - _znear));
            // clipConstant.y = _zfar / (_zfar - _znear);
            return clipConstant.x / (clipConstant.y - depth);
        }

        float linearDepthPerspectiveOffCenterLH(float3 clipConstant, float depth)
        {
            // clipConstant.x = (2 * znear * zfar);
            // clipConstant.y = zfar + znear;
            // clipConstant.z = zfar - znear;
            return clipConstant.x / (clipConstant.y - clipConstant.z * depth);
        }

        float3 computeTangent(float3 viewdir, float2 coord)
        {
            float3 dp1 = ddx(viewdir);
            float3 dp2 = ddy(viewdir);
            float2 duv1 = ddx(coord);
            float2 duv2 = ddy(coord);

            float3x3 M = float3x3(dp1, dp2, cross(dp1, dp2));
            float2x3 I = float2x3(cross(M[1], M[2]), cross(M[2], M[0]));
            float3 T = mul(float2(duv1.x, duv2.x), I);
            return normalize(T);
        }

        float3 computeBinormal(float3 N, float3 viewdir, float2 coord)
        {
            float3 dp1 = ddx(viewdir);
            float3 dp2 = ddy(viewdir);
            float2 duv1 = ddx(coord);
            float2 duv2 = ddy(coord);

            float3x3 M = float3x3(dp1, dp2, cross(dp1, dp2));
            float2x3 I = float2x3(cross(M[1], M[2]), cross(M[2], M[0]));
            float3 B = mul(float2(duv1.y, duv2.y), I);
            return normalize(B);
        }

        float3x3 ComputeTangentBinormalNormal(float3 N, float3 viewdir, float2 coord)
        {
            float3 dp1 = ddx(viewdir);
            float3 dp2 = ddy(viewdir);
            float2 duv1 = ddx(coord);
            float2 duv2 = ddy(coord);

            float3x3 M = float3x3(dp1, dp2, cross(dp1, dp2));
            float2x3 I = float2x3(cross(M[1], M[2]), cross(M[2], M[0]));
            float3 T = mul(float2(duv1.x, duv2.x), I);
            float3 B = mul(float2(duv1.y, duv2.y), I);

            return float3x3(normalize(T), normalize(B), N);
        }

        float2 ComputeSphereCoord(float3 normal)
        {
			normal = clamp(normal, -1.0, 1.0);
			float2 coord = float2((atan2(normal.x, normal.z) * InvPIE * 0.5f + 0.5f), acos(normal.y) * InvPIE);
            return coord;
        }
        
		float3 ComputeSphereNormal(float2 coord, float phiStart = 0.0, float phiLength = PI_2, float thetaStart = 0, float thetaLength = PI)
		{
			float3 normal;
			normal.x = -sin(thetaStart + coord.y * thetaLength) * sin(phiStart + coord.x * phiLength);
			normal.y =  cos(thetaStart + coord.y * thetaLength);
			normal.z = -sin(thetaStart + coord.y * thetaLength) * cos(phiStart + coord.x * phiLength);
			return normal;
		}
		
		float GetJitterOffset(float2 uv)
		{
			return dot(frac(uv * 0.25), float2(1.0, 0.25));
		}
		
		float3 DecodeRGBT(float4 rgbt, float range = 1024)
		{
			rgbt.a = rgbt.a / (1 + 1 / range - rgbt.a);
			return rgbt.rgb * rgbt.a;
		}
    	]]>
    </shader>
 </effect>