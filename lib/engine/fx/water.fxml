<?xml version='1.0'?>
<effect language="hlsl">
    <include name="sys:fx/Gbuffer.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <parameter name="matModelViewProject" type="float4x4" semantic="matModelViewProject" />
    <parameter name="matModelViewInverse" type="float4x4" semantic="matModelViewInverse"/>
    <parameter name="quality" type="float4"/>
    <parameter name="diffuse" type="float3"/>
    <parameter name="specular" type="float3"/>
    <parameter name="transmittance" type="float3"/>
    <parameter name="smoothness" type="float"/>
    <parameter name="texDiffuse" type="texture2D"/>
    <parameter name="texNormal" type="texture2D" />
    <parameter name="texSpecular" type="texture2D" />
    <shader>
        <![CDATA[
            float3 DecodeNormalMap(Texture2D normal, float2 coord)
            {
                float3 bump;
                bump.xy = normal.Sample(PointClamp, coord).gr * 2.0 - 1.0;
                bump.z = sqrt(1.0 - bump.x * bump.x - bump.y * bump.y);
                return normalize(bump);
            }

            float3 GetDiffuse(Texture2D diffuseMap, float3 diffuse, float2 coord)
            {
                return srgb2linear(diffuseMap.Sample(PointClamp, coord).rgb) * diffuse;
            }

            float3 GetNormal(Texture2D normalMap, float3 normal, float3 tangent, float2 coord, float quality)
            {
                float3 tangentNormal;
                if (quality > 0.55)
                    tangentNormal = lerp(float3(0.0, 0.0, 1.0), normalMap.Sample(PointClamp, coord).rgb * 2 - 1, 0.1);
                else
                    tangentNormal = DecodeNormalMap(normalMap, coord);

                float3 N = normalize(normal);
                float3 T = normalize(tangent);
                float3 B = cross(N, T);

                float3x3 tbn = float3x3(T, B, N);
                float3 highNormal = mul(tangentNormal, tbn);
                return normalize(highNormal);
            }

            float2 GetSpecular(Texture2D specularMap, float2 coord)
            {
                return specularMap.Sample(PointClamp, coord).rg;
            }

            void DepthVS(
                in float4 Position : POSITION,
                out float4 oPosition : SV_Position)
            {
                oPosition = mul(matModelViewProject, Position);
            }

            void DepthPS()
            {
            }

            void WaterVS(
                in float4 Position : POSITION,
                in float4 TangentQuat : TANGENT,
                in float2 Texcoord : TEXCOORD,
                out float3 oNormal : TEXCOORD0,
                out float3 oTangent : TEXCOORD1,
                out float2 oTexcoord : TEXCOORD2,
                out float4 oPosition : SV_Position)
            {
                TangentQuat = TangentQuat * 2 - 1;

                float3 Normal = QuaternionToNormal(TangentQuat);
                float3 Tangent = QuaternionToTangent(TangentQuat);

                oNormal = mul(Normal, (float3x3)matModelViewInverse);
                oTangent = mul(Tangent, (float3x3)matModelViewInverse);
                oTexcoord = Texcoord * 0.5;
                oPosition = mul(matModelViewProject, Position);
            }

            GbufferParam WaterPS(
                in float3 iNormal : TEXCOORD0,
                in float3 iTangent : TEXCOORD1,
                in float2 coord : TEXCOORD2,
                in uint isFonrtFace : SV_IsFrontFace)
            {
                MaterialParam material;
                material.albedo = quality.r > 0.0 ? GetDiffuse(texDiffuse, diffuse, coord) : diffuse.rgb;
                material.normal = quality.g > 0.0 ? GetNormal(texNormal, iNormal, iTangent, coord, quality.g) : normalize(iNormal);

                if (quality.b > 0.0)
                {
                    float4 specularTex = texSpecular.Sample(PointClamp, coord);
                    material.specular = specularTex.r;
                    material.smoothness = specularTex.g;
                }
                else
                {
                    material.specular = specular;
                    material.smoothness = smoothness;
                }

                if (!isFonrtFace)
                {
                    material.normal *= -1;
                }

                material.transmittance = transmittance;
                material.occlusion = 1;
                material.lightModel = LIGHTINGMODEL_TRANSMITTANCE;

                return EncodeGbuffer(material);
            }
        ]]>
    </shader>
    <technique name="Shadow">
        <pass name="p0">
            <state name="inputlayout" value="POS3F_T4F_UV2F"/>
            <state name="vertex" value="DepthVS"/>
            <state name="fragment" value="DepthPS"/>
            <state name="primitive" value="triangle" />
        </pass>
    </technique>
    <technique name="TransparentBack">
        <pass name="p0">
            <state name="inputlayout" value="POS3F_T4F_UV2F"/>
            <state name="vertex" value="WaterVS"/>
            <state name="fragment" value="WaterPS"/>
            <state name="primitive" value="triangle" />
            <state name="cullmode" value="front" />
            <state name="colormask0" value="rgba" />
            <state name="colormask1" value="rgba" />
            <state name="stencilTest" value="true"/>
            <state name="stencilPass" value="replace"/>
            <state name="stencilTwoPass" value="replace"/>
        </pass>
    </technique>
    <technique name="TransparentFront">
        <pass name="p0">
            <state name="inputlayout" value="POS3F_T4F_UV2F"/>
            <state name="vertex" value="WaterVS"/>
            <state name="fragment" value="WaterPS"/>
            <state name="primitive" value="triangle" />
            <state name="cullmode" value="back"/>
            <state name="colormask0" value="rgba" />
            <state name="colormask1" value="rgba" />
            <state name="stencilTest" value="true"/>
            <state name="stencilPass" value="replace"/>
            <state name="stencilTwoPass" value="replace"/>
        </pass>
    </technique>
</effect>