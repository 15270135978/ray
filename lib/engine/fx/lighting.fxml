<?xml version="1.0"?>
<effect version="1270" language="hlsl">
    <include name="sys:fx/math.fxml"/>
    <include name="sys:fx/sampler.fxml"/>
    <shader>
        <![CDATA[
        float SmoothnessToRoughness(float smoothness)
        {
            return (1.0f - smoothness) * (1.0f - smoothness);
        }

        float RoughnessToSmoothness(float roughness)
        {
            return 1.0f - sqrt(roughness);
        }

        float ShininessToSmoothness(float spec)
        {
            // http://simonstechblog.blogspot.de/2011/12/microfacet-brdf.html
            return 1.0f - pow(max(0, 2.0 / (spec + 2)), 0.25);
        }

        float SmoothnessToShininess(float smoothness)
        {
            return 2.0f / max(1e-4, pow(1.0 - smoothness, 4)) - 2.0f;
        }
        
		float ComputeSpecularMicroOcclusion(float f0)
		{
			return saturate(dot(f0, 0.33333h) * 50);
		}

		float ComputeSpecularMicroOcclusion(float3 f0)
		{
			return saturate(dot(f0, 0.33333h) * 50);
		}

        float3 fresnelSchlick(float3 f0, float f9, float LdotH)
        {
            // https://seblagarde.wordpress.com/2012/06/03/spherical-gaussien-approximation-for-blinn-phong-phong-and-fresnel
            return lerp(f0, f9, pow(1 - LdotH, 5));
        }

        float LambertBRDF(float3 N, float3 L)
        {
            return saturate(dot(N, L));
        }

        float OrenNayarBRDF(float3 N, float3 L, float3 V, float roughness)
        {
            // http://ruh.li/GraphicsOrenNayar.html

            float sigma2 = roughness * roughness;

            float nl = saturate(dot(N, L));
            float lv = saturate(dot(L, V));
            float nv = abs(dot(N, V) + +1e-5);

            float s = lv - nl * nv;
            float t = s <= 0 ? 1 : max(max(nl, nv), 1e-6);
            float A = 1.0 / (1.0 + (0.5 - 2.0 / (3.0 * PI)) * sigma2);
            float B = sigma2 * A;

            return nl * (A + B * (s / t));
        }

        float BurleyBRDF(float3 N, float3 L, float3 V, float roughness)
        {
            float3 H = normalize(V + L);

            float energyBias = 0.5 * roughness;
            float energyFactor = lerp(1, 1 / 1.51, roughness);

            float nl = saturate(dot(N, L));
            float vh = saturate(dot(V, H));
            float nv = abs(dot(N, V)) + 1e-5h;

            float fd90 = energyBias + 2.0 * vh * vh * roughness;

            float FL = fresnelSchlick(1, fd90, nl);
            float FV = fresnelSchlick(1, fd90, nv);

            return FL * FV * energyFactor * nl;
        }

        float3 TranslucencyBRDF(float3 N, float3 L, float3 transmittanceColor)
        {
            float w = lerp(0, 0.5, luminance(transmittanceColor));
            float wn = rcp((1 + w) * (1 + w));
            float nl = dot(N, L);
            float transmittance = saturate((-nl + w) * wn);
            float diffuse = saturate((nl + w) * wn);
            return diffuse + transmittanceColor * transmittance;
        }

        float DiffuseBRDF(float3 N, float3 L, float3 V, float gloss)
        {
            float roughness = max(SmoothnessToRoughness(gloss), 0.001);
            return BurleyBRDF(N, L, V, roughness);
        }

        float3 DiffuseBRDF(float3 N, float3 L, float3 V, float gloss, float3 transmittanceColor)
        {
            float roughness = SmoothnessToRoughness(gloss);
            float w = lerp(0, 0.5, luminance(transmittanceColor));
            float wn = rcp((1 + w) * (1 + w));
            float nl = dot(N, L);
            float transmittance = saturate((-nl + w) * wn);
            float brdf = BurleyBRDF(N, L, V, roughness);
            float diffuse = saturate((brdf + w) * wn);
            return diffuse + transmittanceColor * transmittance;
        }

        float3 SpecularBRDF_BlinnPhong(float3 N, float3 L, float3 V, float gloss, float3 f0)
        {
            // http://blog.selfshadow.com/publications/s2013-shading-course/lazarov/s2013_pbs_black_ops_2_slides_v2.pdf
            // http://www.filmicworlds.com/2014/04/21/optimizing-ggx-shaders-with-dotlh/

            float3 H = normalize(L + V);

            float nh = saturate(dot(N, H));
            float nl = saturate(dot(N, L));
            float lh = saturate(dot(L, H));

            float alpha = exp2(10 * gloss + 1); // 2 - 2048
            float D =  ((alpha + 2) / 8) * exp2(alpha * InvLog2 * nh - alpha * InvLog2);

            float k = min(1.0f, gloss + 0.545f);
            float G = rcp(k * lh * lh + 1 - k);

            float3 F = fresnelSchlick(f0, 1.0, lh);

            return D * F * G * nl;
        }

        float3 SpecularBRDF_GGX(float3 N, float3 L, float3 V, float gloss, float3 f0, float NormalizationFactor)
        {
            float3 H = normalize(L + V);

            float nh = saturate(dot(N, H));
            float nl = saturate(dot(N, L));
            float nv = saturate(dot(N, V));
            float vh = saturate(dot(V, H));
            float roughness = max(SmoothnessToRoughness(gloss), 0.001);

			float m2 = roughness * roughness;
			float spec = (nh * m2 - nh) * nh + 1;
			spec = m2 / (spec * spec) * NormalizationFactor;

			float Gv = nl * (nv * (1 - m2) + m2);
			float Gl = nv * (nl * (1 - m2) + m2);
			spec *= 0.5 / (Gv + Gl);

			float3 f90 = ComputeSpecularMicroOcclusion(f0);
            float3 fresnel = fresnelSchlick(f0, f90, vh);

            return spec * fresnel * nl;
        }

        float3 SpecularBRDF(float3 N, float3 L, float3 V, float gloss, float3 f0)
        {
            return SpecularBRDF_GGX(N, L, V, gloss, f0, 1.0);
        }

        void CubemapBoxParallaxCorrection(inout float3 R, in float3 P, in float3 envBoxCenter, in float3 envBoxMin, in float3 envBoxMax)
        {
            float3 R2 = normalize(R.xyz);

            float3 rbmax = ((envBoxCenter + envBoxMax) - P) / R2;
            float3 rbmin = ((envBoxCenter + envBoxMin) - P) / R2;
            float3 rbminmax = (R2 > 0.0f) ? rbmax : rbmin;
            float3 posonbox = P + R * min(min(rbminmax.x, rbminmax.y), rbminmax.z);

            R = normalize(posonbox - envBoxCenter);
        }

        float EnvironmentMip(float smoothness, int miplevel)
        {
            return lerp(miplevel, 0, smoothness);
        }

        float3 EnvironmentReflect(float3 normal, float3 view)
        {
            return reflect(-view, normal);
        }

        float3 EnvironmentDiffuse(float3 prefilteredColor, float3 diff)
        {
            return prefilteredColor * diff;
        }

        float3 EnvironmentSpecularUnreal4(float3 N, float3 V, float smoothness, float3 specular)
        {
            float4 c0 = float4(-1, -0.0275, -0.572, 0.022);
            float4 c1 = float4(1, 0.0425, 1.04, -0.04);
            float4 r = SmoothnessToRoughness(smoothness) * c0 + c1;
            float a004 = min(r.x * r.x, exp2(-9.28 * abs(dot(N, V)))) * r.x + r.y;
            float2 AB = float2(-1.04, 1.04) * a004 + r.zw;
            return specular * AB.x + AB.y;
        }

        float3 EnvironmentSpecularCrytek(float3 N, float3 V, float gloss, float3 specular)
        {
            const float3 specCol90 = float3( 1, 1, 1 );
            return lerp(specular, specCol90, pow(1 - saturate(dot(N, V)), 5) / (40 - 39 * gloss));
        }

        float3 EnvironmentSpecularLUT(Texture2D texLUT, float3 N, float3 V, float gloss, float3 specular)
        {
            float NdotV = saturate(dot(N, V));
            float2 envBRDF = texLUT.Sample(PointClamp, float2(NdotV, gloss)).rg;
            return specular * envBRDF.x + envBRDF.y;
        }

        float attenuationTerm(float3 lightPosition, float3 P, float3 atten)
        {
            float3 v = lightPosition - P;
            float d2 = dot(v, v);
            float d = sqrt(d2);
            return rcp(dot(atten, float3(1, d, d2)));
        }

        float spotLighting(float3 lightPosition, float3 lightDirection, float2 cosOuterInner, float3 atten, float3 pos)
        {
            // cosOuterInner is (cos_outer_cone, cos_inner_cone)
            float3 v = pos - lightPosition;
            float d2 = dot(v, v);
            float d = sqrt(d2);
            float spotFactor = dot(normalize(v), lightDirection);
            return smoothstep(cosOuterInner.x, cosOuterInner.y, spotFactor) * (spotFactor / dot(atten, float3(1, d, d2)));
        }

        float shadowLighting(Texture2D shadowMap, float4x4 shadowEye2LightViewProject, float4 shadowEye2LightView, float2 shadowFactor, float3 viewPosition)
        {
            // shadowFactor.x is shadow scale
            // shadowFactor.y is shadow bias

            float4 proj = mul(shadowEye2LightViewProject, float4(viewPosition, 1.0));
            proj /= proj.w;
            proj.xy = PosToCoord(proj.xy);

            float d1 = shadowMap.Sample(LinearClamp, proj.xy).r;
            float d2 = dot(shadowEye2LightView, float4(viewPosition, 1.0));
            float d = exp((shadowFactor.x * (d1 - d2) + shadowFactor.y));
            float shadow = saturate(d);

            return shadow;
        }
        ]]>
    </shader>
</effect>