<?xml version='1.0'?>
<effect language="glsl">
    <include name="sys:fx/Gbuffer.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <parameter name="matModelViewProject" type="float4x4" semantic="matModelViewProject" />
    <parameter name="matModelInverseTranspose" type="float4x4" semantic="matModelInverseTranspose" />
    <parameter name="matView" type="float4x4" semantic="matView"/>
    <parameter name="diffuse" type="float4" />
    <parameter name="specular" type="float4" />
    <parameter name="shininess" type="float" />
    <parameter name="texDiffuse" type="texture2D"/>
    <parameter name="texSpecular" type="texture2D" />
    <parameter name="texNormal" type="texture2D" />
    <shader name="vertex">
        <![CDATA[
            float3 SphereNormalMap(Texture2D texNormal, float2 coord)
            {
                float3 bump;
                bump.xy = texNormal.Sample(PointClamp, coord).gr * 2.0 - 1.0;
                bump.z = sqrt(1.0 - bump.x * bump.x - bump.y * bump.y);
                return normalize(bump);
            }

            void OpaqueNormalVS(
                in float4 Position : POSITION0,
                in float4 Normal : NORMAL0,
                in float4 Tangent : TANGENT0,
                in float4 Texcoord : TEXCOORD0,
                out float2 oCoord  : TEXCOORD0,
                out float4 oNormal : TEXCOORD1,
                out float4 oTangent : TEXCOORD2,
                out float4 oPosition : SV_Position)
            {
                oCoord = Texcoord.xy;
                oTangent = mul(Tangent, matModelInverseTranspose);
                oNormal = mul(Normal, matModelInverseTranspose);
                oNormal = mul(float4(oNormal.rgb, 0.0), matView);
                oPosition = mul(Position, matModelViewProject);
            }

            void OpaqueNormalPS(
                in float2 coord  : TEXCOORD0,
                in float4 normal : TEXCOORD1,
                in float4 tangent : TEXCOORD2,
                out float4 FragData0 : SV_Target0,
                out float4 FragData1 : SV_Target1)
            {
                float4 albedo;
                float spec;

                float3 N = normalize(normal.xyz);
                float3 T = normalize(tangent.xyz);
                float3 B = cross(N, T);

                float3x3 tbn = float3x3(T, B, N);
                float3 tangentNormal = SphereNormalMap(texNormal, coord);
                float3 highNormal = mul(tangentNormal, tbn);

                if (diffuse.w > 0.0f)
                    albedo = diffuse;
                else
                    albedo = texDiffuse.Sample(PointClamp, coord);

                float gloss = shininess;
                if (specular.w > 0.0f)
                    spec = luminance(specular.rgb);
                else
                {
                    float3 specularAO = texSpecular.Sample(PointClamp, coord).rgb;
                    spec = specularAO.r;
                    gloss = specularAO.g;
                }

                FragData0 = StoreGBufferRT0(srgb2linear(albedo), spec);
                FragData1 = StoreGBufferRT1(highNormal, gloss);
            }
        ]]>
    </shader>
    <technique name="opaque">
        <pass name="p0">
            <state name="inputlayout" value="POS3F_N3F_T3F_UV2F"/>
            <state name="vertex" value="OpaqueNormalVS"/>
            <state name="fragment" value="OpaqueNormalPS"/>

            <state name="primitive" value="triangle" />

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
</effect>