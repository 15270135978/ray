<?xml version='1.0'?>
<effect language="hlsl">
    <include name="sys:fx/GBuffer.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <include name="sys:fx/lighting.fxml"/>
    <parameter name="texMRT0" type="texture2D" semantic="DiffuseMap" />
    <parameter name="texMRT1" type="texture2D" semantic="NormalMap" />
    <parameter name="texDepthLinear" type="texture2D" semantic="DepthLinearMap" />
    <parameter name="matViewInverse" type="float4x4" semantic="matViewInverse" />
    <parameter name="matProjectInverse" type="float4x4" semantic="matProjectInverse" />
    <parameter name="texEnvDiffuse" type="textureCUBE"/>
    <parameter name="texEnvSpecular" type="textureCUBE"/>
    <parameter name="texLUT" type="texture2D"/>
    <parameter name="texEnvFactor" type="float3"/>
    <parameter name="envBoxMax" type="float3"/>
    <parameter name="envBoxMin" type="float3"/>
    <parameter name="envBoxCenter" type="float3"/>
    <shader>
        <![CDATA[
             void SkyboxEnvLightingVS(
                in float4 Position : POSITION,
                out float2 oTexcoord : TEXCOORD0,
                out float3 oViewDir : TEXCOORD1,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oViewDir  = -mul(matProjectInverse, Position).xyz;
                oTexcoord = PosToCoord(Position.xy);
            }

            float4 SkyboxEnvLightingPS(in float2 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target
            {
                float4 MRT0 = texMRT0.Sample(PointClamp, coord);
                float4 MRT1 = texMRT1.Sample(PointClamp, coord);

                float shininess = restoreShininess(MRT1);
                float specular = restoreSpecular(MRT0);
                float3 diffuse = restoreDiffuse(MRT0);
                float3 N = restoreNormal(MRT1);
                float3 V = normalize(viewdir);
                float3 P = restorePosition(texDepthLinear, coord, V);

                float mipLayer = brdfEnvironmentEnvMip(shininess, texEnvFactor.r);

                float3 worldPosition = mul(matViewInverse, P);
                float3 worldNormal = mul((float3x3)matViewInverse, N);
                float3 worldView = mul((float3x3)matViewInverse, V);
                float3 R = brdfEnvironmentEnvVec(worldNormal, worldView);

                // Box Projected Cubemap Environment Mapping
                float3 rbmax = (envBoxMax - worldPosition) / R;
                float3 rbmin = (envBoxMin - worldPosition) / R;
                float3 rbminmax = (R > 0.0f) ? rbmax : rbmin;
                float3 posonbox = worldPosition + R * min(min(rbminmax.x, rbminmax.y), rbminmax.z);
                float3 R2 = normalize(posonbox - envBoxCenter);

                float3 prefilteredDiffuse = texEnvDiffuse.Sample(PointClamp, worldNormal).rgb;
                float3 prefilteredSpeculr = texEnvSpecular.SampleLevel(PointClamp, R2, mipLayer).rgb;

                float3 shading = brdfEnvironmentDiffuse(prefilteredDiffuse, diffuse) * texEnvFactor.g;
                shading += brdfEnvironmentSpecular(prefilteredSpeculr, texLUT, worldNormal, worldView, shininess, specular) * texEnvFactor.b;

                return float4(shading, 0.0);
            }
        ]]>
    </shader>
    <technique name="OpaqueShading">
        <pass name="SkyLighting">
            <state name="inputlayout" value="POS3F"/>

            <state name="vertex" value="SkyboxEnvLightingVS"/>
            <state name="fragment" value="SkyboxEnvLightingPS"/>

            <state name="cullmode" value="none"/>
            <state name="colormask" value="rgb"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>
            <state name="blendalphasrc" value="zero"/>
            <state name="blendalphadst" value="one"/>

            <state name="stencilTest" value="true"/>
            <state name="stencilFunc" value="equal"/>
            <state name="stencilTwoFunc" value="equal"/>
        </pass>
    </technique>
    <technique name="TransparentShading">
        <pass name="SkyLighting">
            <state name="inputlayout" value="POS3F"/>

            <state name="vertex" value="SkyboxEnvLightingVS"/>
            <state name="fragment" value="SkyboxEnvLightingPS"/>

            <state name="cullmode" value="none"/>
            <state name="colormask" value="rgb"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>
            <state name="blendalphasrc" value="zero"/>
            <state name="blendalphadst" value="one"/>

            <state name="stencilTest" value="true"/>
            <state name="stencilFunc" value="equal"/>
            <state name="stencilTwoFunc" value="equal"/>
        </pass>
    </technique>
</effect>