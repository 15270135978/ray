<?xml version='1.0'?>
<effect version="1270" language="hlsl">
    <include name="sys:fx/math.fxml"/>
    <include name="sys:fx/sampler.fxml"/>
    <parameter name="texSource" type="texture2D" />
    <parameter name="texBloom" type="texture2D" />
    <parameter name="bloomThreshold" type="float" />
    <parameter name="bloomIntensity" type="float" />
    <parameter name="bloomSizeInv" type="float2" />
    <parameter name="exposure" type="float" />
    <shader>
        <![CDATA[
            #define TONEMAP_LINEAR 0
            #define TONEMAP_EXPONENTIAL 1
            #define TONEMAP_EXPONENTIAL_HSV 2
            #define TONEMAP_REINHARD 3
            #define TONEMAP_FILMIC 4

            #ifndef TONEMAP_OPERATOR
            #   define TONEMAP_OPERATOR TONEMAP_FILMIC
            #endif

            float3 Uncharted2Tonemap(float3 x)
            {
                const float A = 0.15; // Shoulder Strength
                const float B = 0.50; // Linear Strength
                const float C = 0.10; // Linear Angle
                const float D = 0.20; // Toe Strength
                const float E = 0.02; // Toe Numerator
                const float F = 0.30; // Toe Denominator E/F = Toe Angle
                const float W = 11.2; // Linear White Point Value
                return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
            }

            float3 FilmicTonemap(float3 color, float exposure)
            {
                #if TONEMAP_OPERATOR == TONEMAP_LINEAR
                    return exposure * color;
                #elif TONEMAP_OPERATOR == TONEMAP_EXPONENTIAL
                    color = 1.0 - exp2(-exposure * color);
                    return color;
                #elif TONEMAP_OPERATOR == TONEMAP_EXPONENTIAL_HSV
                    color = rgb2hsv(color);
                    color.b = 1.0 - exp2(-exposure * color.b);
                    color = hsv2rgb(color);
                    return color;
                #elif TONEMAP_OPERATOR == TONEMAP_REINHARD
                    color = xyz2Yxy(rgb2xyz(color));
                    float L = color.r;
                    L *= exposure;
                    float LL = 1 + L / (burnout * burnout);
                    float L_d = L * LL / (1 + L);
                    color.r = L_d;
                    color = xyz2rgb(Yxy2xyz(color));
                    return color;
                #elif TONEMAP_OPERATOR == TONEMAP_FILMIC
                    color = 2.0f * Uncharted2Tonemap(exposure * color);
                    float3 whiteScale = 1.0f / Uncharted2Tonemap(11.2);
                    color *= whiteScale;
                    return color;
                #else
                    return color;
                #endif
            }

            float3 ToneBlueShift(float3 color, float lum)
            {
                // martin's modified blue shift
                const float3 BLUE_SHIFT = float3(0.4f, 0.4f, 0.7f);
                return lerp(lum * BLUE_SHIFT, color, saturate(16.0f * lum));
            }

            float3 ToneMapping(float3 color, float3 bloom, float exposure)
            {
                color += bloom;
                color = ToneBlueShift(color, luminance(color));
                color = FilmicTonemap(color, exposure);
                return saturate(color);
            }

            void PostProcessVS(
                in float4 Position : POSITION0,
                in float4 Texcoord : TEXCOORD0,
                out float4 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                oTexcoord = Texcoord;
                oPosition = Position;
            }

            float4 SumLumPS(in float4 coord : TEXCOORD0) : SV_Target0
            {
                float4 color = texSource.Sample(PointClamp, coord.xy);
                color += texSource.Sample(PointClamp, coord.xy, int2(1, 0));
                color += texSource.Sample(PointClamp, coord.xy, int2(1, 1));
                color += texSource.Sample(PointClamp, coord.xy, int2(0, 1));
                color *= 0.25;

                return color;
            }

            float4 SumLumLogPS(in float4 coord : TEXCOORD0) : SV_Target0
            {
                float lum = texSource.Sample(PointClamp, coord.xy).r;
                lum += texSource.Sample(PointClamp, coord.xy, int2(1, 0)).r;
                lum += texSource.Sample(PointClamp, coord.xy, int2(1, 1)).r;
                lum += texSource.Sample(PointClamp, coord.xy, int2(0, 1)).r;
                lum *= 0.25;

                const float epsilon = 0.0001;
                return log(lum + epsilon);
            }

            float4 BloomPS(in float4 coord : TEXCOORD0) : SV_Target0
            {
                float4 color = texSource.Sample(PointClamp, coord.xy);
                return color * max(luminance(color.rgb) - bloomThreshold, 0.0) * bloomIntensity;
            }

            float4 BlurhPS(in float4 coord : TEXCOORD0) : SV_Target0
            {
                float4 color;
                color  = texSource.Sample(PointClamp, coord.xy) * 0.2;
                color += texSource.Sample(PointClamp, coord.xy, int2(-5, 0)) * 0.02;
                color += texSource.Sample(PointClamp, coord.xy, int2(-4, 0)) * 0.044;
                color += texSource.Sample(PointClamp, coord.xy, int2(-3, 0)) * 0.0716;
                color += texSource.Sample(PointClamp, coord.xy, int2(-2, 0)) * 0.1046;
                color += texSource.Sample(PointClamp, coord.xy, int2(-1, 0)) * 0.1686;
                color += texSource.Sample(PointClamp, coord.xy, int2( 1, 0)) * 0.1686;
                color += texSource.Sample(PointClamp, coord.xy, int2( 2, 0)) * 0.1046;
                color += texSource.Sample(PointClamp, coord.xy, int2( 3, 0)) * 0.0716;
                color += texSource.Sample(PointClamp, coord.xy, int2( 4, 0)) * 0.044;
                color += texSource.Sample(PointClamp, coord.xy, int2( 5, 0)) * 0.02;

                return color;
            }

           float4 BlurvPS(in float4 coord : TEXCOORD0) : SV_Target0
            {
                float4 color;
                color  = texSource.Sample(PointClamp, coord.xy) * 0.2;
                color += texSource.Sample(PointClamp, coord.xy, int2(0, -5)) * 0.02;
                color += texSource.Sample(PointClamp, coord.xy, int2(0, -4)) * 0.044;
                color += texSource.Sample(PointClamp, coord.xy, int2(0, -3)) * 0.0716;
                color += texSource.Sample(PointClamp, coord.xy, int2(0, -2)) * 0.1046;
                color += texSource.Sample(PointClamp, coord.xy, int2(0, -1)) * 0.1686;
                color += texSource.Sample(PointClamp, coord.xy, int2(0,  1)) * 0.1686;
                color += texSource.Sample(PointClamp, coord.xy, int2(0,  2)) * 0.1046;
                color += texSource.Sample(PointClamp, coord.xy, int2(0,  3)) * 0.0716;
                color += texSource.Sample(PointClamp, coord.xy, int2(0,  4)) * 0.044;
                color += texSource.Sample(PointClamp, coord.xy, int2(0,  5)) * 0.02;
                return color;
            }

            float4 FimicTongMappingPS(in float4 coord : TEXCOORD0) : SV_Target0
            {
                float3 color = texSource.Sample(PointClamp, coord.xy).rgb;
                float3 bloom =  texBloom.Sample(PointClamp, coord.xy).rgb;
                float3 LDR = ToneMapping(color, bloom, exposure);
                return float4(LDR, luminance(LDR));
            }
        ]]>
    </shader>
    <technique name="postprocess">
        <pass name="SumLum">
            <state name="vertex" value="PostProcessVS" />
            <state name="fragment" value="SumLumPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
        <pass name="SumLumLog">
            <state name="vertex" value="PostProcessVS" />
            <state name="fragment" value="SumLumLogPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
        <pass name="GenerateBloom">
            <state name="vertex" value="PostProcessVS" />
            <state name="fragment" value="BloomPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
        <pass name="BlurBloomh">
            <state name="vertex" value="PostProcessVS" />
            <state name="fragment" value="BlurhPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
        <pass name="BlurBloomv">
            <state name="vertex" value="PostProcessVS" />
            <state name="fragment" value="BlurvPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
        <pass name="FimicTongMapping">
            <state name="vertex" value="PostProcessVS" />
            <state name="fragment" value="FimicTongMappingPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
</effect>