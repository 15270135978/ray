<?xml version='1.0'?>
<effect version="1270" language="hlsl">
    <include name="sys:fx/math.fxml"/>
    <include name="sys:fx/sampler.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <macro name="LIGHT_UNIT_SCALE" value="10000.0f"/>
    <parameter name="texSource" type="texture2D" />
    <parameter name="texSourceSizeInv" type="float2" />
    <parameter name="texBloom" type="texture2D" />
    <parameter name="texLumAve" type="texture2D" />
    <parameter name="bloomThreshold" type="float" />
    <parameter name="bloomIntensity" type="float" />
    <parameter name="bloomWeight[9]" type="float[]" />
    <parameter name="texSourceLevel" type="int"/>
    <parameter name="exposure" type="float" />
    <parameter name="delta" type="float2" />
    <shader>
        <![CDATA[
    		#define TONEMAP_LINEAR 0
    		#define TONEMAP_EXPONENTIAL 1
    		#define TONEMAP_EXPONENTIAL_HSV 2
    		#define TONEMAP_REINHARD 3
    		#define TONEMAP_UNCHARTED2 4
    		#define TONEMAP_ACES 5
    		#define TONEMAP_OPERATOR TONEMAP_UNCHARTED2

			float3 TonemapACES(float3 x)
			{
				const float A = 2.51f;
				const float B = 0.03f;
				const float C = 2.43f;
				const float D = 0.59f;
				const float E = 0.14f;
				return (x * (A * x + B)) / (x * (C * x + D) + E);
			}
			
			float4 TonemapHable(float4 x) 
			{
				const float A = 0.22f;
				const float B = 0.30f;
				const float C = 0.10f;
				const float D = 0.20f;
				const float E = 0.01f;
				const float F = 0.30f;
				return ((x*(A*x+C*B)+D*E) / (x*(A*x+B)+D*F)) - E / F;
			}

            float TonemapHableInverse(float x) 
            {
                const float A = 0.22f;
                const float B = 0.30f;
                const float C = 0.10f;
                const float D = 0.20f;
                const float E = 0.01f;
                const float F = 0.30f;
                const float W = 11.2f;
                const float q = B*(F*(C-x) - E);
                const float d = A*(F*(x - 1.0) + E);
                return (q -sqrt(q*q - 4.0*D*F*F*x*d)) / (2.0*d);
            }

            float3 FilmicTonemap(float3 color, float exposure)
            {
                #if TONEMAP_OPERATOR == TONEMAP_LINEAR
                    return exposure * color;
                #elif TONEMAP_OPERATOR == TONEMAP_EXPONENTIAL
                    color = 1.0 - exp2(-exposure * color);
                    return color;
                #elif TONEMAP_OPERATOR == TONEMAP_EXPONENTIAL_HSV
                    color = rgb2hsv(color);
                    color.b = 1.0 - exp2(-exposure * color.b);
                    color = hsv2rgb(color);
                    return color;
                #elif TONEMAP_OPERATOR == TONEMAP_REINHARD
                    color = xyz2Yxy(rgb2xyz(color));
                    float L = color.r;
                    L *= exposure;
                    float LL = 1 + L / (burnout * burnout);
                    float L_d = L * LL / (1 + L);
                    color.r = L_d;
                    color = xyz2rgb(Yxy2xyz(color));
                    return color;
                #elif TONEMAP_OPERATOR == TONEMAP_UNCHARTED2
                    float4 curr = TonemapHable(float4(color * exposure, 8.0));
                    curr /= curr.w;
                    return saturate(curr.rgb);
                #elif TONEMAP_OPERATOR == TONEMAP_ACES
                	return TonemapACES(color * exposure);
                #else
                    return color;
                #endif
            }

            float3 ColorGrading(float3 color, float4 balance)
            {
                float3 lum = luminance(color);
                color = lerp(lum, color, balance.a);
                color *= balance.rgb;
                return color;
            }
            
			float ComputeExposureISO(float avgLum, float middleGray = 12.5)
			{
				float EV100 = log2(avgLum * 100.0f / middleGray);
				float maxLuminance = 1.2f * exp2(EV100);
				float exposure = 1.0 / maxLuminance;
				return exposure;
			}

            float CalcAdaptedLum(float adaptedLum, float lum, float2 step)
            {
                return max(0, adaptedLum + (lum - adaptedLum) * step.x);
            }

            float3 noise3( float2 seed )
            {
                return frac(sin(dot(seed.xy, float2(34.483, 89.637))) * float3(29156.4765, 38273.5639, 47843.7546));
            }

            float3 ColorBanding(float3 color, float2 uv)
            {
                float3 noise = noise3(uv) + noise3(uv + 0.5789) - 0.5;
                color += noise / 255.0;
                return color;
            }

            float3 ToneMapping(float3 color, float3 bloom, float avgLum, float exposure)
            {
                color += bloom;
                color = FilmicTonemap(color, exposure * ComputeExposureISO(avgLum));
                color = saturate(color);
                color = linear2srgb(color);
                return color;
            }

            void PostProcessVS(
                in float4 Position : POSITION0,
                out float4 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord = PosToCoord(Position);
            }

            void SumLumVS(
                in float4 Position : POSITION0,
                out float4 oTexcoord0 : TEXCOORD0,
                out float4 oTexcoord1 : TEXCOORD1,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord0.xy = PosToCoord(Position.xy);
                oTexcoord0.zw = oTexcoord0.xy + float2(texSourceSizeInv.x, 0);
                oTexcoord1.xy = oTexcoord0.xy + texSourceSizeInv;
                oTexcoord1.zw = oTexcoord0.xy + float2(0, texSourceSizeInv.y);
            }

            float4 SumLumPS(in float4 coord0 : TEXCOORD0, in float4 coord1 : TEXCOORD1) : SV_Target0
            {
                float4 color = texSource.Sample(PointClamp, coord0.xy);
                color += texSource.Sample(PointClamp, coord0.zw);
                color += texSource.Sample(PointClamp, coord1.xy);
                color += texSource.Sample(PointClamp, coord1.zw);
                color *= 0.25;

                return color;
            }

            float SumLumLogPS(in float4 coord0 : TEXCOORD0, in float4 coord1 : TEXCOORD1) : SV_Target0
            {
                float4 color = texSource.Sample(PointClamp, coord0.xy);
                color += texSource.Sample(PointClamp, coord0.zw);
                color += texSource.Sample(PointClamp, coord1.xy);
                color += texSource.Sample(PointClamp, coord1.zw);
                color *= 0.25;

                const float epsilon = 0.01f;
                return log(max(epsilon, luminance(color)));
            }

            float AvgLuminancePS(in float4 coord0 : TEXCOORD0, in float4 coord1 : TEXCOORD1) : SV_Target0
            {
                float color = texSource.SampleLevel(PointClamp, coord0.xy, 8).r;
                float adaptedLum = texLumAve.Sample(PointClamp, float2(0.5,0.5)).r;
                return CalcAdaptedLum(adaptedLum, exp(color), delta);
            }

            float4 BloomPS(in float4 coord : TEXCOORD0) : SV_Target0
            {
                float4 color = texSource.Sample(PointClamp, coord.xy);
                float avgLum = texLumAve.Sample(PointClamp, float2(0, 0)).r;
                color *= exposure * ComputeExposureISO(avgLum);
                return max(0, (color - bloomThreshold) * bloomIntensity);
            }

            void BlurVS(
                in float4 Position : POSITION0,
                out float2 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord = PosToCoord(Position.xy);
            }

            float4 BlurPS(in float2 coord : TEXCOORD0) : SV_Target0
            {
            	float2 coords = coord - texSourceSizeInv * 4.0;

                float4 color = 0;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeight[0]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeight[1]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeight[2]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeight[3]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeight[4]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeight[5]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeight[6]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeight[7]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeight[8];

                return color;
            }

            float4 FimicTongMappingPS(in float4 coord : TEXCOORD0) : SV_Target0
            {
                float avgLum = texLumAve.Sample(PointClamp, float2(0, 0), 0).r;
                float3 color = texSource.Sample(PointClamp, coord.xy, 0).rgb;
                float3 bloom = texBloom.SampleLevel(LinearClamp, coord.xy, 0).rgb;
                float3 LDR = ToneMapping(color, bloom, avgLum, exposure);
                LDR = ColorBanding(LDR, coord.xy);
                return float4(LDR, luminance(LDR));
            }
        ]]>
    </shader>
    <technique name="SumLum">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="SumLumVS" />
            <state name="fragment" value="SumLumPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="SumLumLog">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="SumLumVS" />
            <state name="fragment" value="SumLumLogPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="AvgLuminance">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="SumLumVS" />
            <state name="fragment" value="AvgLuminancePS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="GenerateBloom">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="PostProcessVS" />
            <state name="fragment" value="BloomPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="BlurBloom">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="BlurVS" />
            <state name="fragment" value="BlurPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="FimicTongMapping">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="PostProcessVS" />
            <state name="fragment" value="FimicTongMappingPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
</effect>