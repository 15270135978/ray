<?xml version="1.0"?>
<effect version="1270" language="hlsl">
    <include name="sys:fx/gbuffer.fxml"/>
    <include name="sys:fx/lighting.fxml"/>
    <parameter name="texSource" type="texture2D"/>
    <parameter name="texDepthLinear" type="texture2D" semantic="DepthLinearMap"/>
    <parameter name="texMRT0" type="texture2D" semantic="DiffuseMap" />
    <parameter name="texMRT1" type="texture2D" semantic="NormalMap" />
    <parameter name="matView" type="float4x4" semantic="matView"/>
    <parameter name="matProject" type="float4x4" semantic="matProject" />
    <parameter name="matProjectInverse" type="float4x4" semantic="matProjectInverse" />
    <parameter name="eyePosition" type="float3" semantic="CameraPosition" />
    <shader>
        <![CDATA[
            static const float rayStep = 0.25;
            static const float minRayStep = 0.1;
            static const int minSteps = 10;
            static const int maxSteps = 200;

            void PostProcessVS(
                in float4 Position : POSITION0,
                out float4 oTexcoord : TEXCOORD0,
                out float3 oViewDir : TEXCOORD1,
                out float4 oPosition : SV_Position
                )
            {
                oPosition = Position;
                oViewDir  = -mul(matProjectInverse, Position).xyz;
                oTexcoord = PosToCoord(Position);
            }

            float3 GetPosition(float3 viewdir, float2 coord)
            {
                float depth = texDepthLinear.Sample(PointClamp, coord).r;
                return viewdir * depth / viewdir.z;
            }

            float4 traceScreenSpaceRay(float2 coord, float3 viewdir, float3 viewPosition, float3 viewNormal)
            {
                float3 R = normalize(reflect(viewPosition, viewNormal));

                float4 proj = mul(matProject, float4(viewPosition + R * rayStep, 1.0));
                proj /= proj.w;
                proj.xy = PosToCoord(proj.xy);

                float2 offset = proj.xy - coord;
                if (!any(offset.xy))
                {
                    return false;
                }

                bool found = false;
                int samplerSteps = lerp(maxSteps, minSteps, R.z);

                [unroll(maxSteps)]
                for (int i = 0; i < samplerSteps; i++)
                {
                    coord += offset;

                    float3 P = GetPosition(viewdir, coord);

                    float depth = viewPosition.z - P.z;
                    if (depth > 0.1)
                    {
                        found = true;
                        break;
                    }
                }

                if (found)
                {
                    return texSource.Sample(PointClamp, coord.xy);
                }

                return 0;
            }

            float4 ScreenSpaceLocalReflectPS(in float2 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target0
            {
                viewdir = normalize(viewdir);

                float4 MRT0 = texMRT0.Sample(PointClamp, coord);
                float4 MRT1 = texMRT1.Sample(PointClamp, coord);

                float specular = restoreSpecular(MRT0);

                float3 viewNormal = DecodeGBufferNormal(MRT1);
                float3 viewPosition = GetPosition(viewdir, coord);

                float4 colors = traceScreenSpaceRay(coord, viewdir, viewPosition, viewNormal);
                float fresnel = fresnelSchlick(dot(viewdir, viewNormal), specular);

                return float4(colors.rgb, colors.a);
            }
        ]]>
    </shader>
    <technique name="ssr">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="PostProcessVS"/>
            <state name="fragment" value="ScreenSpaceLocalReflectPS"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="srcalpha"/>
            <state name="blenddst" value="one"/>
            <state name="blendalphasrc" value="zero" />
            <state name="blendalphadst" value="one" />
        </pass>
    </technique>
</effect>