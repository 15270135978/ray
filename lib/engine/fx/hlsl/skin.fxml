<?xml version='1.0'?>
<effect language="hlsl">
    <include name="sys:fx/Gbuffer.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <parameter name="matModelViewProject" type="float4x4" semantic="matModelViewProject" />
    <parameter name="matModelViewInverse" type="float4x4" semantic="matModelViewInverse"/>
    <parameter name="quality" type="float4"/>
    <parameter name="diffuse" type="float4"/>
    <parameter name="specular" type="float"/>
    <parameter name="shininess" type="float"/>
    <parameter name="translucency" type="float"/>
    <parameter name="texDiffuse" type="texture2D"/>
    <parameter name="texNormal" type="texture2D" />
    <parameter name="texSpecular" type="texture2D" />
    <shader>
        <![CDATA[
            float3 DecodeNormalMap(Texture2D normal, float2 coord)
            {
                float3 bump;
                bump.xy = normal.Sample(PointClamp, coord).gr * 2.0 - 1.0;
                bump.z = sqrt(1.0 - bump.x * bump.x - bump.y * bump.y);
                return normalize(bump);
            }

            float3 SkinSynthesis(float3 diffuse, float m)
            {
                float3 melanin = diffuse * luminance(diffuse);
                return diffuse * lerp(1.0, melanin, m);
            }

            float3 SkinTransmittance(float translucency)
            {
                return exp((1 - saturate(translucency)) * float3(-8, -40, -64));
            }

            float3 GetDiffuse(Texture2D diffuseMap, float4 diffuse, float2 coord)
            {
                return SkinSynthesis(srgb2linear(diffuseMap.Sample(PointClamp, coord).rgb * diffuse.rgb), diffuse.w);
            }

            float3 GetNormal(Texture2D normalMap, float3 normal, float3 tangent, float2 coord, float quality)
            {
                float3 tangentNormal;
                if (quality > 0.55)
                    tangentNormal = normalMap.Sample(PointClamp, coord).rgb * 2 - 1;
                else
                    tangentNormal = DecodeNormalMap(normalMap, coord);

                float3 N = normalize(normal);
                float3 T = normalize(tangent);
                float3 B = cross(N, T);

                float3x3 tbn = float3x3(T, B, N);
                float3 highNormal = mul(tangentNormal, tbn);
                return normalize(highNormal);
            }

            float2 GetSpecular(Texture2D specularMap, float2 coord, float specular, float shininess)
            {
                return specularMap.Sample(PointClamp, coord).rg * float2(specular, shininess);
            }

            void DepthVS(
                in float4 Position : POSITION,
                out float4 oPosition : SV_Position)
            {
                oPosition = mul(matModelViewProject, Position);
            }

            void DepthPS()
            {
            }

            void ReflectiveShadowVS(
                in float4 Position : POSITION,
                in float4 TangentQuat : TANGENT,
                in float2 Texcoord : TEXCOORD,
                out float3 oNormal : TEXCOORD0,
                out float2 oTexcoord : TEXCOORD1,
                out float4 oPosition : SV_Position)
            {
                float3 Normal = QuaternionToNormal(TangentQuat * 2 - 1);

                oTexcoord = Texcoord;
                oNormal = mul(Normal, (float3x3)matModelViewInverse);
                oPosition = mul(matModelViewProject, Position);
            }

            void ReflectiveShadowPS(
                in float3 normal : TEXCOORD0,
                in float2 coord : TEXCOORD1,
                out float4 fragData0 : SV_Target0,
                out float4 fragData1 : SV_Target1)
            {
                float3 albedo = quality.r > 0.0 ? GetDiffuse(texDiffuse, diffuse, coord) : srgb2linear(diffuse.rgb);
                float2 brdfParm = quality.b > 0.0 ? GetSpecular(texSpecular, coord, specular, shininess) : float2(specular, shininess);

                fragData0 = StoreGBufferRT0(albedo, brdfParm.r);
                fragData1 = StoreGBufferRT1(normalize(normal), brdfParm.g);
            }

            void OpaqueVS(
                in float4 Position : POSITION,
                in float4 TangentQuat : TANGENT,
                in float2 Texcoord : TEXCOORD,
                out float3 oNormal : TEXCOORD0,
                out float3 oTangent : TEXCOORD1,
                out float2 oTexcoord : TEXCOORD2,
                out float4 oPosition : SV_Position)
            {
                TangentQuat = TangentQuat * 2 - 1;

                float3 Normal = QuaternionToNormal(TangentQuat);
                float3 Tangent = QuaternionToTangent(TangentQuat);

                oNormal = mul(Normal, (float3x3)matModelViewInverse);
                oTangent = mul(Tangent, (float3x3)matModelViewInverse);
                oTexcoord = Texcoord;
                oPosition = mul(matModelViewProject, Position);
            }

            GbufferParam OpaquePS(in float3 iNormal : TEXCOORD0, in float3 iTangent : TEXCOORD1, in float2 iTexcoord : TEXCOORD2)
            {
                MaterialParam material;
                if (quality.r > 0.0)
                {
                    material.albedo = srgb2linear(texDiffuse.Sample(PointClamp, iTexcoord).rgb * diffuse.rgb);
                    material.albedo = SkinSynthesis(material.albedo, diffuse.w);
                }
                else
                {
                    material.albedo = srgb2linear(diffuse.rgb);
                }

                if (quality.g > 0.0)
                {
                    material.normal = GetNormal(texNormal, iNormal, iTangent, iTexcoord, quality.g);
                }
                else
                {
                    material.normal = normalize(iNormal);
                }

                if (quality.b > 0.0)
                {
                    float4 specularTex = texSpecular.Sample(PointClamp, iTexcoord);
                    material.specular = specularTex.rgb * specular;
                    material.smoothness = specularTex.a * shininess;
                }
                else
                {
                    material.specular = specular;
                    material.smoothness = shininess;
                }

                material.transmittance = SkinTransmittance(translucency);
                material.lightModel = LIGHTINGMODEL_TRANSMITTANCE;

                return EncodeGbuffer(material);
            }
        ]]>
    </shader>
    <technique name="Shadow">
        <pass name="p0">
            <state name="inputlayout" value="POS3F_T4F_UV2F"/>
            <state name="vertex" value="DepthVS"/>
            <state name="fragment" value="DepthPS"/>
            <state name="primitive" value="triangle" />
        </pass>
    </technique>
    <technique name="ReflectiveShadow">
        <pass name="p0">
            <state name="inputlayout" value="POS3F_T4F_UV2F"/>
            <state name="vertex" value="ReflectiveShadowVS"/>
            <state name="fragment" value="ReflectiveShadowPS"/>
            <state name="primitive" value="triangle" />
            <state name="colormask0" value="rgba" />
            <state name="colormask1" value="rgba" />
        </pass>
    </technique>
    <technique name="Opaque">
        <pass name="p0">
            <state name="inputlayout" value="POS3F_T4F_UV2F"/>
            <state name="vertex" value="OpaqueVS"/>
            <state name="fragment" value="OpaquePS"/>
            <state name="primitive" value="triangle" />
            <state name="colormask0" value="rgba" />
            <state name="colormask1" value="rgba" />
            <state name="stencilTest" value="true"/>
            <state name="stencilPass" value="replace"/>
            <state name="stencilTwoPass" value="replace"/>
        </pass>
    </technique>
</effect>