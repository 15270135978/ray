<?xml version="1.0"?>
<effect version="1270" language="hlsl">
    <include name="sys:fx/GBuffer.fxml"/>
    <include name="sys:fx/lighting.fxml"/>
    <parameter name="matModel" type="float4x4" semantic="matModel" />
    <parameter name="matViewProject" type="float4x4" semantic="matViewProject" />
    <parameter name="matView" type="float4x4" semantic="matView" />
    <parameter name="matViewInverse" type="float4x4" semantic="matViewInverse" />
    <parameter name="matProjectInverse" type="float4x4" semantic="matProjectInverse" />
    <parameter name="matViewProjectInverse" type="float4x4" semantic="matViewProjectInverse" />
    <parameter name="texMRT0" type="texture2D" semantic="DeferredGraphicMap" />
    <parameter name="texMRT1" type="texture2D" semantic="DeferredNormalMap" />
    <parameter name="texDepth" type="texture2D" semantic="DeferredDepthMap" />
    <parameter name="texDepthLinear" type="texture2D" semantic="DeferredDepthLinearMap" />
    <parameter name="texLight" type="texture2D" semantic="DeferredLightMap" />
    <parameter name="texSource" type="texture2D"/>
    <parameter name="texEnvironmentMap" type="texture2D"/>
    <parameter name="eyePosition" type="float3" />
    <parameter name="clipInfo" type="float4"/>
    <parameter name="projInfo" type="float4"/>
    <parameter name="lightColor" type="float3" />
    <parameter name="lightDirection" type="float3" />
    <parameter name="lightPosition" type="float3" />
    <parameter name="lightAttenuation" type="float3"/>
    <parameter name="lightRange" type="float"/>
    <parameter name="lightIntensity" type="float"/>
    <parameter name="lightSpotInnerCone" type="float"/>
    <parameter name="lightSpotOuterCone" type="float"/>
    <parameter name="shadowChannel" type="int" />
    <parameter name="shadowMap" type="texture2D" />
    <parameter name="shadowFactor" type="float2"/>
    <parameter name="shadowMatrix" type="float4x4" />
    <shader>
        <![CDATA[
            void DeferredDepthOnlyVS(
                in float4 Position : POSITION,
                out float4 oPosition : SV_Position)
            {
                oPosition = mul(Position, matModel);
                oPosition = mul(oPosition, matViewProject);
            }

            void DeferredScreenQuadVS(
                in float4 Position : POSITION,
                in float4 Texcoord : TEXCOORD0,
                out float4 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                oTexcoord = Texcoord;
                oPosition = Position;
            }

            void DeferredSpotLightVS(
                in float4 Position : POSITION,
                out float2 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                Position.xyz *= lightRange;
                Position.xyz += lightDirection * lightRange;
                Position = mul(Position, matModel);
                Position = mul(Position, matViewProject);
                oTexcoord = PosToCoord(Position.xy);
                oPosition = Position;
            }

            void DeferredPointLightVS(
                in float4 Position : POSITION,
                out float2 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                Position.xyz *= lightRange;
                Position = mul(Position, matModel);
                Position = mul(Position, matViewProject);
                oTexcoord = PosToCoord(Position.xy);
                oPosition = Position;
            }

            void DeferredDepthOnlyPS()
            {
            }

            float4 DeferredDepthLinearPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float d = texDepth.Sample(PointClamp, coord).r;
                return clipInfo.x / (clipInfo.z - clipInfo.y * d);
            }

            float4 DeferredCopyOnlyPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                return texSource.Sample(PointClamp, coord);
            }

            float4 DeferredSunLightPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float4 MRT1 = texMRT1.Sample(PointClamp, coord);
                float4 MRT0 = texMRT0.Sample(PointClamp, coord);

                float smoothness = restoreSmoothness(MRT1);
                float specular = restoreSpecular(MRT0);

                float3 N = restoreNormal(MRT1);
                float3 P = restorePosition(texDepthLinear, projInfo, coord);
                float3 V = normalize(eyePosition - P);
                float3 L = lightDirection;

                float4 lighting;
                lighting.rgb = brdfLambert(N, L, lightColor);
                lighting.a = brdfSpecular(N, L, V, smoothness, specular);

                return lighting;
            }

            float4 DeferredSunLightShadowPS(in float4 coord : TEXCOORD0) : SV_Target
            {
                float4 MRT1 = texMRT1.Sample(PointClamp, coord.xy);
                float4 MRT0 = texMRT0.Sample(PointClamp, coord.xy);

                float smoothness = restoreSmoothness(MRT1);
                float specular = restoreSpecular(MRT0);

                float3 N = restoreNormal(MRT1);
                float3 P = restorePosition(texDepthLinear, projInfo, coord);
                float3 V = normalize(eyePosition - P);
                float3 L = lightDirection;

                float3 world = mul(float4(P, 1.0), matViewInverse);

                float4 lighting;
                lighting.rgb = brdfLambert(N, L, lightColor);
                lighting.a = brdfSpecular(N, L, V, smoothness, specular);
                lighting *= shadowLighting(shadowMap, shadowMatrix, shadowFactor.x, shadowFactor.y, world);

                return lighting;
            }

            float4 DeferredDirectionalLightPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float4 MRT1 = texMRT1.Sample(PointClamp, coord);
                float4 MRT0 = texMRT0.Sample(PointClamp, coord);

                float smoothness = restoreSmoothness(MRT1);
                float specular = restoreSpecular(MRT0);

                float3 N = restoreNormal(MRT1);
                float3 P = restorePosition(texDepthLinear, projInfo, coord);
                float3 V = normalize(eyePosition - P);
                float3 L = lightDirection;

                float4 lighting;
                lighting.rgb = brdfLambert(N, L, lightColor);
                lighting.a = brdfSpecular(N, L, V, smoothness, specular);

                return MRT1;
            }

            float4 DeferredDirectionalLightShadowPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float4 MRT1 = texMRT1.Sample(PointClamp, coord);
                float4 MRT0 = texMRT0.Sample(PointClamp, coord);

                float smoothness = restoreSmoothness(MRT1);
                float specular = restoreSpecular(MRT0);

                float3 N = restoreNormal(MRT1);
                float3 P = restorePosition(texDepthLinear, projInfo, coord);
                float3 V = normalize(eyePosition - P);
                float3 L = lightDirection;

                float4 world = mul(float4(P, 1.0), matViewInverse);
                world = world / world.w;

                float4 lighting;
                lighting.rgb = brdfLambert(N, L, lightColor);
                lighting.a = brdfSpecular(N, L, V, smoothness, specular);
                lighting *= shadowLighting(shadowMap, shadowMatrix, shadowFactor.x, shadowFactor.y, world.xyz);

                return lighting;
            }

            float4 DeferredSpotLightPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float4 MRT1 = texMRT1.Sample(PointClamp, coord);
                float4 MRT0 = texMRT0.Sample(PointClamp, coord);

                float smoothness = restoreSmoothness(MRT1);
                float specular = restoreSpecular(MRT0);

                float3 N = restoreNormal(MRT1);
                float3 P = restorePosition(texDepthLinear, projInfo, coord);
                float3 V = normalize(eyePosition - P);
                float3 L = normalize(lightPosition - P);

                float4 lighting;
                lighting.rgb = brdfLambert(N, L, lightColor);
                lighting.a = brdfSpecular(N, L, V, smoothness, specular);
                lighting *= spotLighting(lightPosition, P, lightDirection, lightSpotInnerCone, lightSpotOuterCone, lightAttenuation);

                return lighting;
            }

            float4 DeferredPointLightPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float4 MRT1 = texMRT1.Sample(PointClamp, coord);
                float4 MRT0 = texMRT0.Sample(PointClamp, coord);

                float smoothness = restoreSmoothness(MRT1);
                float specular = restoreSpecular(MRT0);

                float3 N = restoreNormal(MRT1);
                float3 P = restorePosition(texDepthLinear, projInfo, coord);
                float3 V = normalize(eyePosition - P);
                float3 L = normalize(lightPosition - P);

                float4 lighting;
                lighting.rgb = brdfLambert(N, L, lightColor);
                lighting.a = brdfSpecular(N, L, V, smoothness, specular);
                lighting *= pointLighting(lightPosition, P, lightAttenuation);

                return lighting;
            }

            float4 DeferredAmbientLightPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float4 MRT1 = texMRT1.Sample(PointClamp, coord);
                float4 MRT0 = texMRT0.Sample(PointClamp, coord);

                float smoothness = restoreSmoothness(MRT1);
                float specular = restoreSpecular(MRT0);

                float3 N = mul(restoreNormal(MRT1), (float3x3)matViewInverse);
                float3 P = restorePosition(texDepth, matViewProjectInverse, coord);
                float3 V = normalize(eyePosition - P);

                float4 lighting;
                lighting.rgb = lightColor;
                lighting.a = brdfEnvironmentSpecular(N, V, smoothness, specular);

                return lighting;
            }

            float4 DeferredShadingOpaquesPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float4 MRT0 = texMRT0.Sample(PointClamp, coord);

                float3 color = restoreDiffuse(texMRT0, coord);
                float4 light = texLight.Sample(PointClamp, coord);

                color = color * light.rgb + light.rgb * light.a;

                return float4(color, 1.0);
            }

            float4 DeferredShadingTransparentsPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float4 MRT0 = texMRT0.Sample(PointClamp, coord);

                float3 color = restoreDiffuse(texMRT0, coord);
                float4 light = texLight.Sample(PointClamp, coord);

                color = color * light.rgb + light.rgb * light.a;

                return float4(color, 1.0);
            }
        ]]>
    </shader>
    <technique name="custom">
        <pass name="DeferredDepthOnly">
            <state name="vertex" value="DeferredDepthOnlyVS"/>
            <state name="fragment" value="DeferredDepthOnlyPS" />
        </pass>
        <pass name="DeferredDepthLinear">
            <state name="vertex" value="DeferredScreenQuadVS"/>
            <state name="fragment" value="DeferredDepthLinearPS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
        <pass name="DeferredCopyOnly">
            <state name="vertex" value="DeferredScreenQuadVS"/>
            <state name="fragment" value="DeferredCopyOnlyPS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
        <pass name="DeferredSunLight">
            <state name="vertex" value="DeferredScreenQuadVS"/>
            <state name="fragment" value="DeferredSunLightPS"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>
        </pass>
        <pass name="DeferredSunLightShadow">
            <state name="vertex" value="DeferredScreenQuadVS"/>
            <state name="fragment" value="DeferredSunLightShadowPS"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>
        </pass>
        <pass name="DeferredDirectionalLight">
            <state name="vertex" value="DeferredScreenQuadVS"/>
            <state name="fragment" value="DeferredDirectionalLightPS"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>
        </pass>
        <pass name="DeferredDirectionalLightShadow">
            <state name="vertex" value="DeferredScreenQuadVS"/>
            <state name="fragment" value="DeferredDirectionalLightShadowPS"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>
        </pass>
        <pass name="DeferredPointLight">
            <state name="vertex" value="DeferredPointLightVS"/>
            <state name="fragment" value="DeferredPointLightPS"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>

            <state name="cullmode" value="none"/>
        </pass>
        <pass name="DeferredSpotLight">
            <state name="vertex" value="DeferredSpotLightVS"/>
            <state name="fragment" value="DeferredSpotLightPS"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>

            <state name="cullmode" value="none"/>
        </pass>
        <pass name="DeferredAmbientLight">
            <state name="vertex" value="DeferredScreenQuadVS"/>
            <state name="fragment" value="DeferredAmbientLightPS"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>

            <state name="cullmode" value="none"/>
        </pass>
        <pass name="DeferredShadingOpaques">
            <state name="vertex" value="DeferredScreenQuadVS"/>
            <state name="fragment" value="DeferredShadingOpaquesPS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
        <pass name="DeferredShadingTransparents">
            <state name="vertex" value="DeferredScreenQuadVS"/>
            <state name="fragment" value="DeferredShadingTransparentsPS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="srcalpha"/>
            <state name="blenddst" value="invsrcalpha"/>
        </pass>
    </technique>
</effect>