<?xml version="1.0"?>
<effect language="hlsl">
	<include name="sys:fx/GBuffer.fxml"/>
	<include name="sys:fx/lighting.fxml"/>
	<include name="sys:fx/inputlayout.fxml"/>
	<parameter name="matModelView" type="float4x4" semantic="matModelView"/>
	<parameter name="matModelViewProject" type="float4x4" semantic="matModelViewProject"/>
	<parameter name="matViewInverse" type="float4x4" semantic="matViewInverse" />
	<parameter name="matProjectInverse" type="float4x4" semantic="matProjectInverse" />
	<parameter name="texMRT0" type="texture2D"/>
	<parameter name="texMRT1" type="texture2D"/>
	<parameter name="texMRT2" type="texture2D"/>
	<parameter name="texDepth" type="texture2D" semantic="DepthMap" />
	<parameter name="texDepthLinear" type="texture2D" semantic="DepthLinearMap" />
	<parameter name="texLight" type="texture2D" semantic="LightingMap" />
	<parameter name="texSource" type="texture2D"/>
	<parameter name="texOpaque" type="texture2D"/>
	<parameter name="clipInfo" type="float2"/>
	<parameter name="lightColor" type="float3" />
	<parameter name="scaleY" type="float"/>
	<parameter name="lightEyeDirection" type="float3" />
	<parameter name="lightEyePosition" type="float3" />
	<parameter name="lightAttenuation" type="float3"/>
	<parameter name="lightOuterInner" type="float2"/>
	<parameter name="shadowMap" type="texture2D" />
	<parameter name="shadowFactor" type="float2"/>
	<parameter name="shadowView2LightView" type="float4"/>
	<parameter name="shadowView2LightViewProject" type="float4x4" />
	<parameter name="envDiffuse" type="textureCUBE"/>
	<parameter name="envSpecular" type="textureCUBE"/>
	<parameter name="envFactor" type="float3"/>
	<parameter name="envBoxMax" type="float3"/>
	<parameter name="envBoxMin" type="float3"/>
	<parameter name="envBoxCenter" type="float3"/>
	<shader>
		<![CDATA[
			void DeferredDepthOnlyVS(
				in float4 Position : POSITION,
				out float4 oPosition : SV_Position)
			{
				oPosition = mul(matModelViewProject, Position);
			}

			void DeferredScreenQuadVS(
				in float4 Position : POSITION,
				out float4 oTexcoord : TEXCOORD0,
				out float4 oPosition : SV_Position)
			{
				oPosition = Position;
				oPosition.y *= scaleY;
				oTexcoord = PosToCoord(Position);
			}

			void DeferredLightingVS(
				in float4 Position : POSITION,
				out float2 oTexcoord : TEXCOORD0,
				out float3 oViewDir : TEXCOORD1,
				out float4 oPosition : SV_Position)
			{
				oPosition = Position;
				oViewDir  = -mul(matProjectInverse, Position).xyz;
				oTexcoord = PosToCoord(Position.xy);
			}

			void DeferredLighting2VS(
				in float4 Position : POSITION,
				out float3 oTexcoord : TEXCOORD0,
				out float3 oViewDir : TEXCOORD1,
				out float4 oPosition : SV_Position)
			{
				oViewDir = -mul(matModelView, Position).xyz;
				oPosition = mul(matModelViewProject, Position);
				oTexcoord.xy = PosToCoord(oPosition.xy / oPosition.w);
				oTexcoord.xy = oTexcoord.xy * oPosition.w;
				oTexcoord.z = oPosition.w;
			}

			void DeferredDepthOnlyPS()
			{
			}

			float4 DeferredDepthLinearPS(in float2 coord : TEXCOORD0) : SV_Target
			{
				float d = texDepth.Sample(PointClamp, coord).r;
				return linearDepthPerspectiveFovLH(clipInfo, d);
			}

			float4 DeferredCopyOnlyPS(in float4 coord : TEXCOORD0) : SV_Target
			{
				return texSource.Sample(PointClamp, coord);
			}

			float4 DeferredAmbientLightPS(in float2 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target
			{
				float4 MRT0 = texMRT0.Sample(PointClamp, coord);
				float4 MRT1 = texMRT1.Sample(PointClamp, coord);
				float4 MRT2 = texMRT2.Sample(PointClamp, coord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float3 V = normalize(viewdir);
				float3 N = material.normal;
				float3 P = restorePosition(texDepthLinear, coord, V);
				float3 L = -lightEyeDirection;

				float4 lighting = 0;
				lighting.rgb = material.albedo * max(0, dot(N, L) * 0.5 + 0.5) * lightColor;
				lighting *= attenuationTerm(lightEyePosition, P, lightAttenuation);
				return lighting;
			}

			float4 DeferredSunLightPS(in float2 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target
			{
				float4 MRT0 = texMRT0.Sample(PointClamp, coord);
				float4 MRT1 = texMRT1.Sample(PointClamp, coord);
				float4 MRT2 = texMRT2.Sample(PointClamp, coord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float3 V = normalize(viewdir);
				float3 P = restorePosition(texDepthLinear, coord, V);
				float3 L = -lightEyeDirection;

				float3 diffuse = DiffuseBRDF(material.normal, L, V, material.smoothness);
				float3 transmittance = TranslucencyBRDF(material.normal, L, material.transmittance);

				float4 lighting;
				lighting.rgb = material.albedo * lerp(diffuse, transmittance, material.lightModel) * lightColor;
				lighting.a = luminance(SpecularBRDF(material.normal, L, V, material.smoothness, material.specular));

				return lighting;
			}

			float4 DeferredSunLightShadowPS(in float2 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target
			{
				float4 MRT0 = texMRT0.Sample(PointClamp, coord);
				float4 MRT1 = texMRT1.Sample(PointClamp, coord);
				float4 MRT2 = texMRT2.Sample(PointClamp, coord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float3 V = normalize(viewdir);
				float3 P = restorePosition(texDepthLinear, coord, V);
				float3 L = -lightEyeDirection;

				float3 diffuse = DiffuseBRDF(material.normal, L, V, material.smoothness);
				float3 transmittance = TranslucencyBRDF(material.normal, L, material.transmittance);

				float4 lighting;
				lighting.rgb = material.albedo * lerp(diffuse, transmittance, material.lightModel) * lightColor;
				lighting.a = luminance(SpecularBRDF(material.normal, L, V, material.smoothness, material.specular));
				lighting *= shadowLighting(shadowMap, shadowView2LightViewProject, shadowView2LightView, shadowFactor, P);

				return lighting;
			}

			float4 DeferredDirectionalLightPS(in float2 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target
			{
				float4 MRT0 = texMRT0.Sample(PointClamp, coord);
				float4 MRT1 = texMRT1.Sample(PointClamp, coord);
				float4 MRT2 = texMRT2.Sample(PointClamp, coord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float3 V = normalize(viewdir);
				float3 P = restorePosition(texDepthLinear, coord, V);
				float3 L = -lightEyeDirection;

				float3 diffuse = DiffuseBRDF(material.normal, L, V, material.smoothness);
				float3 transmittance = TranslucencyBRDF(material.normal, L, material.transmittance);

				float4 lighting;
				lighting.rgb = material.albedo * lerp(diffuse, transmittance, material.lightModel) * lightColor;
				lighting.a = luminance(SpecularBRDF(material.normal, L, V, material.smoothness, material.specular));

				return lighting;
			}

			float4 DeferredDirectionalLightShadowPS(in float2 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target
			{
				float4 MRT0 = texMRT0.Sample(PointClamp, coord);
				float4 MRT1 = texMRT1.Sample(PointClamp, coord);
				float4 MRT2 = texMRT2.Sample(PointClamp, coord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float3 V = normalize(viewdir);
				float3 P = restorePosition(texDepthLinear, coord, V);
				float3 L = -lightEyeDirection;

				float3 diffuse = DiffuseBRDF(material.normal, L, V, material.smoothness);
				float3 transmittance = TranslucencyBRDF(material.normal, L, material.transmittance);

				float4 lighting;
				lighting.rgb = material.albedo * lerp(diffuse, transmittance, material.lightModel) * lightColor;
				lighting.a = luminance(SpecularBRDF(material.normal, L, V, material.smoothness, material.specular));
				lighting *= shadowLighting(shadowMap, shadowView2LightViewProject, shadowView2LightView, shadowFactor, P);

				return lighting;
			}

			float4 DeferredSpotLightPS(in float3 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target
			{
				float2 texcoord = coord.xy / coord.z;

				float4 MRT0 = texMRT0.Sample(PointClamp, texcoord);
				float4 MRT1 = texMRT1.Sample(PointClamp, texcoord);
				float4 MRT2 = texMRT2.Sample(PointClamp, texcoord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float3 V = normalize(viewdir);
				float3 P = restorePosition(texDepthLinear, texcoord, V);
				float3 L = normalize(lightEyePosition - P);

				float3 diffuse = DiffuseBRDF(material.normal, L, V, material.smoothness);
				float3 transmittance = TranslucencyBRDF(material.normal, L, material.transmittance);

				float4 lighting;
				lighting.rgb = material.albedo * lerp(diffuse, transmittance, material.lightModel) * lightColor;
				lighting.a = luminance(SpecularBRDF(material.normal, L, V, material.smoothness, material.specular));
				lighting *= attenuationTerm(lightEyePosition, P, lightAttenuation);
				lighting *= spotLighting(lightEyePosition, lightEyeDirection, lightOuterInner, lightAttenuation, P);

				return lighting;
			}

			float4 DeferredSpotLightShadowPS(in float3 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target
			{
				float2 texcoord = coord.xy / coord.z;

				float4 MRT0 = texMRT0.Sample(PointClamp, texcoord);
				float4 MRT1 = texMRT1.Sample(PointClamp, texcoord);
				float4 MRT2 = texMRT2.Sample(PointClamp, texcoord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float3 V = normalize(viewdir);
				float3 P = restorePosition(texDepthLinear, texcoord, V);
				float3 L = normalize(lightEyePosition - P);

				float3 diffuse = DiffuseBRDF(material.normal, L, V, material.smoothness);
				float3 transmittance = TranslucencyBRDF(material.normal, L, material.transmittance);

				float4 lighting;
				lighting.rgb = material.albedo * lerp(diffuse, transmittance, material.lightModel) * lightColor;
				lighting.a = luminance(SpecularBRDF(material.normal, L, V, material.smoothness, material.specular));
				lighting *= shadowLighting(shadowMap, shadowView2LightViewProject, shadowView2LightView, shadowFactor, P);
				lighting *= spotLighting(lightEyePosition, lightEyeDirection, lightOuterInner, lightAttenuation, P);

				return lighting;
			}

			float4 DeferredPointLightPS(in float3 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target
			{
				float2 texcoord = coord.xy / coord.z;

				float4 MRT0 = texMRT0.Sample(PointClamp, texcoord);
				float4 MRT1 = texMRT1.Sample(PointClamp, texcoord);
				float4 MRT2 = texMRT2.Sample(PointClamp, texcoord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float3 V = normalize(viewdir);
				float3 P = restorePosition(texDepthLinear, texcoord, V);
				float3 L = normalize(lightEyePosition - P);

				float3 diffuse = DiffuseBRDF(material.normal, L, V, material.smoothness);
				float3 transmittance = TranslucencyBRDF(material.normal, L, material.transmittance);

				float4 lighting;
				lighting.rgb = material.albedo * lerp(diffuse, transmittance, material.lightModel) * lightColor;
				lighting.a = luminance(SpecularBRDF(material.normal, L, V, material.smoothness, material.specular));
				lighting *= attenuationTerm(lightEyePosition, P, lightAttenuation);

				return lighting;
			}
			
			float4 DeferredEnvironmentLightingPS(in float2 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : SV_Target
			{
				float4 MRT0 = texMRT0.Sample(PointClamp, coord);
				float4 MRT1 = texMRT1.Sample(PointClamp, coord);
				float4 MRT2 = texMRT2.Sample(PointClamp, coord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float3 V = normalize(viewdir);
				float3 P = restorePosition(texDepthLinear, coord, V);

				float3 worldPosition = mul(matViewInverse, P);
				float3 worldNormal = mul((float3x3)matViewInverse, material.normal);
				float3 worldView = mul((float3x3)matViewInverse, V);

				float mipLayer = EnvironmentMip(material.smoothness, envFactor.r);

				float3 R = EnvironmentReflect(worldNormal, worldView);
				CubemapBoxParallaxCorrection(R, worldPosition, envBoxCenter, envBoxMin, envBoxMax);

				float3 prefilteredDiffuse = envDiffuse.Sample(PointClamp, worldNormal).rgb;
				float3 prefilteredSpeculr = envSpecular.SampleLevel(PointClamp, R, mipLayer).rgb;
				float3 prefilteredTransmittance = envDiffuse.Sample(PointClamp, -worldNormal).rgb;

				float3 fresnel = EnvironmentSpecularUnreal4(worldNormal, worldView, material.smoothness, material.specular);
				float4 lighting = texLight.Sample(PointClamp, coord);

				float3 shading = 0.0;
				shading += prefilteredDiffuse * material.albedo * envFactor.g * material.occlusion;
				shading += prefilteredTransmittance * material.transmittance * envFactor.g;
				shading += prefilteredSpeculr * fresnel * envFactor.b;

				return float4(shading, 0.0);
			}

			float4 DeferredShadingOpaquesPS(in float2 coord : TEXCOORD0) : SV_Target
			{
				float4 MRT0 = texMRT0.Sample(PointClamp, coord);
				float4 MRT1 = texMRT1.Sample(PointClamp, coord);
				float4 MRT2 = texMRT2.Sample(PointClamp, coord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float4 lighting = texLight.Sample(PointClamp, coord);

				return float4(lighting.rgb + lighting.a, 1.0);
			}

			float4 DeferredShadingTransparentsPS(in float2 coord : TEXCOORD0) : SV_Target
			{
				float4 MRT0 = texMRT0.Sample(PointClamp, coord);
				float4 MRT1 = texMRT1.Sample(PointClamp, coord);
				float4 MRT2 = texMRT2.Sample(PointClamp, coord);

				MaterialParam material;
				DecodeGbuffer(MRT0, MRT1, MRT2, material);

				float4 source = texOpaque.Sample(PointClamp, coord);
				float4 lighting = texLight.Sample(PointClamp, coord);

				return float4(lerp(source.xyz, source.xyz + lighting.rgb + lighting.a, material.occlusion), source.w);
			}
		]]>
	</shader>
	<technique name="DeferredCopyOnly">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>
			<state name="vertex" value="DeferredScreenQuadVS"/>
			<state name="fragment" value="DeferredCopyOnlyPS"/>
			<state name="cullmode" value="none"/>
			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>
		</pass>
	</technique>
	<technique name="DeferredDepthOnly">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>
			<state name="vertex" value="DeferredDepthOnlyVS"/>
			<state name="fragment" value="DeferredDepthOnlyPS"/>
		</pass>
	</technique>
	<technique name="DeferredDepthLinear">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredScreenQuadVS"/>
			<state name="fragment" value="DeferredDepthLinearPS"/>

			<state name="cullmode" value="none"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>
		</pass>
	</technique>
	<technique name="DeferredAmbientLight">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredLightingVS"/>
			<state name="fragment" value="DeferredAmbientLightPS"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="cullmode" value="none"/>

			<state name="blend" value="true"/>
			<state name="blendsrc" value="one"/>
			<state name="blenddst" value="one"/>
			<state name="blendalphasrc" value="one"/>
			<state name="blendalphadst" value="one"/>

			<state name="stencilTest" value="true"/>
			<state name="stencilFunc" value="equal"/>
			<state name="stencilTwoFunc" value="equal"/>
		</pass>
	</technique>
	<technique name="DeferredSunLight">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredLightingVS"/>
			<state name="fragment" value="DeferredSunLightPS"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="cullmode" value="none"/>

			<state name="blend" value="true"/>
			<state name="blendsrc" value="one"/>
			<state name="blenddst" value="one"/>
			<state name="blendalphasrc" value="one"/>
			<state name="blendalphadst" value="one"/>

			<state name="stencilTest" value="true"/>
			<state name="stencilFunc" value="equal"/>
			<state name="stencilTwoFunc" value="equal"/>
		</pass>
	</technique>
	<technique name="DeferredSunLightShadow">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredLightingVS"/>
			<state name="fragment" value="DeferredSunLightShadowPS"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="cullmode" value="none"/>

			<state name="blend" value="true"/>
			<state name="blendsrc" value="one"/>
			<state name="blenddst" value="one"/>
			<state name="blendalphasrc" value="one"/>
			<state name="blendalphadst" value="one"/>

			<state name="stencilTest" value="true"/>
			<state name="stencilFunc" value="equal"/>
			<state name="stencilTwoFunc" value="equal"/>
		</pass>
	</technique>
	<technique name="DeferredDirectionalLight">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredLightingVS"/>
			<state name="fragment" value="DeferredDirectionalLightPS"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="cullmode" value="none"/>

			<state name="blend" value="true"/>
			<state name="blendsrc" value="one"/>
			<state name="blenddst" value="one"/>
			<state name="blendalphasrc" value="one"/>
			<state name="blendalphadst" value="one"/>

			<state name="stencilTest" value="true"/>
			<state name="stencilFunc" value="equal"/>
			<state name="stencilTwoFunc" value="equal"/>
		</pass>
	</technique>
	<technique name="DeferredDirectionalLightShadow">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredLightingVS"/>
			<state name="fragment" value="DeferredDirectionalLightShadowPS"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="cullmode" value="none"/>

			<state name="blend" value="true"/>
			<state name="blendsrc" value="one"/>
			<state name="blenddst" value="one"/>
			<state name="blendalphasrc" value="one"/>
			<state name="blendalphadst" value="one"/>

			<state name="stencilTest" value="true"/>
			<state name="stencilFunc" value="equal"/>
			<state name="stencilTwoFunc" value="equal"/>
		</pass>
	</technique>
	<technique name="DeferredPointLight">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredLighting2VS"/>
			<state name="fragment" value="DeferredPointLightPS"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="blend" value="true"/>
			<state name="blendsrc" value="one"/>
			<state name="blenddst" value="one"/>
			<state name="blendalphasrc" value="one"/>
			<state name="blendalphadst" value="one"/>

			<state name="cullmode" value="front"/>

			<state name="stencilTest" value="true"/>
			<state name="stencilFunc" value="equal"/>
			<state name="stencilTwoFunc" value="equal"/>
		</pass>
	</technique>
	<technique name="DeferredSpotLight">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredLighting2VS"/>
			<state name="fragment" value="DeferredSpotLightPS"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="blend" value="true"/>
			<state name="blendsrc" value="one"/>
			<state name="blenddst" value="one"/>
			<state name="blendalphasrc" value="one"/>
			<state name="blendalphadst" value="one"/>

			<state name="cullmode" value="front"/>

			<state name="stencilTest" value="true"/>
			<state name="stencilFunc" value="equal"/>
			<state name="stencilTwoFunc" value="equal"/>
		</pass>
	</technique>
	<technique name="DeferredSpotLightShadow">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredLighting2VS"/>
			<state name="fragment" value="DeferredSpotLightShadowPS"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="blend" value="true"/>
			<state name="blendsrc" value="one"/>
			<state name="blenddst" value="one"/>
			<state name="blendalphasrc" value="one"/>
			<state name="blendalphadst" value="one"/>

			<state name="cullmode" value="front"/>

			<state name="stencilTest" value="true"/>
			<state name="stencilFunc" value="equal"/>
			<state name="stencilTwoFunc" value="equal"/>
		</pass>
	</technique>
	<technique name="DeferredEnvironmentLighting">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredLightingVS"/>
			<state name="fragment" value="DeferredEnvironmentLightingPS"/>

			<state name="cullmode" value="none"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="blend" value="true"/>
			<state name="blendsrc" value="one"/>
			<state name="blenddst" value="one"/>
			<state name="blendalphasrc" value="one"/>
			<state name="blendalphadst" value="one"/>

			<state name="stencilTest" value="true"/>
			<state name="stencilFunc" value="equal"/>
			<state name="stencilTwoFunc" value="equal"/>
		</pass>
	</technique>
	<technique name="DeferredShadingOpaques">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredScreenQuadVS"/>
			<state name="fragment" value="DeferredShadingOpaquesPS"/>

			<state name="cullmode" value="none"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="stencilTest" value="true"/>
			<state name="stencilFunc" value="notequal"/>
			<state name="stencilTwoFunc" value="notequal"/>
			<state name="stencilRef" value="0"/>
			<state name="stencilTwoRef" value="0"/>
		</pass>
	</technique>
	<technique name="DeferredShadingTransparents">
		<pass name="p0">
			<state name="inputlayout" value="POS3F"/>

			<state name="vertex" value="DeferredScreenQuadVS"/>
			<state name="fragment" value="DeferredShadingTransparentsPS"/>

			<state name="cullmode" value="none"/>

			<state name="depthtest" value="false"/>
			<state name="depthwrite" value="false"/>

			<state name="stencilTest" value="false"/>
			<state name="stencilFunc" value="notequal"/>
			<state name="stencilTwoFunc" value="notequal"/>
			<state name="stencilRef" value="0"/>
			<state name="stencilTwoRef" value="0"/>
		</pass>
	</technique>
</effect>