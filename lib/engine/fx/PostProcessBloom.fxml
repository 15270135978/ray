<?xml version='1.0'?>
<effect version="1270" language="hlsl">
    <include name="sys:fx/math.fxml"/>
    <include name="sys:fx/sampler.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <macro name="LIGHT_UNIT_SCALE" value="10000.0f"/>
    <parameter name="texSource" type="texture2D" />
    <parameter name="texSourceSizeInv" type="float2" />
    <parameter name="texBloom" type="texture2D" />
    <parameter name="texLumAve" type="texture2D" />
    <parameter name="bloomThreshold" type="float" />
    <parameter name="bloomIntensity" type="float" />
    <parameter name="bloomWeights[9]" type="float[]" />
    <parameter name="bloomFactors[5]" type="float[]" />
    <parameter name="texSourceLevel" type="int"/>
    <parameter name="exposure" type="float" />
    <parameter name="delta" type="float2" />
    <shader>
        <![CDATA[
    		#define TONEMAP_LINEAR 0
    		#define TONEMAP_REINHARD 1
            #define TONEMAP_HABLE 2
    		#define TONEMAP_UNCHARTED2 3
            #define TONEMAP_HEJI2015 4
    		#define TONEMAP_ACES 5
    		#define TONEMAP_OPERATOR TONEMAP_UNCHARTED2

			float3 TonemapACES(float3 x)
			{
				const float A = 2.51f;
				const float B = 0.03f;
				const float C = 2.43f;
				const float D = 0.59f;
				const float E = 0.14f;
				return (x * (A * x + B)) / (x * (C * x + D) + E);
			}
			
			float4 TonemapHable(float4 x) 
			{
				const float A = 0.22f;
				const float B = 0.30f;
				const float C = 0.10f;
				const float D = 0.20f;
				const float E = 0.01f;
				const float F = 0.30f;
				return ((x*(A*x+C*B)+D*E) / (x*(A*x+B)+D*F)) - E / F;
			}

            float TonemapHableInverse(float x) 
            {
                const float A = 0.22f;
                const float B = 0.30f;
                const float C = 0.10f;
                const float D = 0.20f;
                const float E = 0.01f;
                const float F = 0.30f;
                const float W = 11.2f;
                const float q = B*(F*(C-x) - E);
                const float d = A*(F*(x - 1.0) + E);
                return (q -sqrt(q*q - 4.0*D*F*F*x*d)) / (2.0*d);
            }

            float3 TonemapReinhardLumaBased(float3 color, float whitePt)
            {
                float luma = luminance(color);
                float toneMappedLuma = luma * (1 + luma / (whitePt * whitePt))/ (1 + luma);
                color *= toneMappedLuma / luma;
                return color;
            }

            float3 TonemapHejl2015(float3 hdr, float whitePt) 
            {
                float4 vh = float4(hdr, whitePt);
                float4 va = 1.425 * vh + 0.05;
                float4 vf = (vh * va + 0.004) / (vh * (va + 0.55) + 0.0491) - 0.0821;
                return vf.rgb / vf.www;
            }

            float3 ColorToneMapping(float3 color)
            {
                #if TONEMAP_OPERATOR == TONEMAP_LINEAR
                    return color;
                #elif TONEMAP_OPERATOR == TONEMAP_REINHARD
                    float3 curr = TonemapReinhardLumaBased(color, 4.0);
                    return saturate(curr);
                #elif TONEMAP_OPERATOR == TONEMAP_HABLE
                    float4 curr = TonemapHable(float4(color, 4.0));
                    curr /= curr.w;
                    return saturate(curr.rgb);
                #elif TONEMAP_OPERATOR == TONEMAP_UNCHARTED2
                    float4 curr = TonemapHable(float4(color, 8.0));
                    curr /= curr.w;
                    return saturate(curr.rgb);
                #elif TONEMAP_OPERATOR == TONEMAP_HEJI2015
                    float3 curr = TonemapHejl2015(color, 4.0);
                    return saturate(curr);
                #elif TONEMAP_OPERATOR == TONEMAP_ACES
                	return TonemapACES(color);
                #else
                    return color;
                #endif
            }

            float3 ColorGrading(float3 color, float4 balance)
            {
                float3 lum = luminance(color);
                color = lerp(lum, color, balance.a);
                color *= balance.rgb;
                return color;
            }
            
			float ComputeExposureISO(float avgLum, float middleGray = 12.5)
			{
				float EV100 = log2(avgLum * 100.0f / middleGray);
				float maxLuminance = 1.2f * exp2(EV100);
				float exposure = 1.0 / maxLuminance;
				return exposure;
			}

            float CalcAdaptedLum(float adaptedLum, float lum, float2 step)
            {
                return max(0, adaptedLum + (lum - adaptedLum) * step.x);
            }

            float3 noise3( float2 seed )
            {
                return frac(sin(dot(seed.xy, float2(34.483, 89.637))) * float3(29156.4765, 38273.5639, 47843.7546));
            }

            float3 ColorBanding(float3 color, float2 uv)
            {
                float3 noise = noise3(uv) + noise3(uv + 0.5789) - 0.5;
                color += noise / 255.0;
                return color;
            }

            void PostProcessVS(
                in float4 Position : POSITION0,
                out float4 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord = PosToCoord(Position.xy).xyxy;
            }

            void SumLumVS(
                in float4 Position : POSITION0,
                out float4 oTexcoord0 : TEXCOORD0,
                out float4 oTexcoord1 : TEXCOORD1,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord0.xy = PosToCoord(Position.xy);
                oTexcoord0.zw = oTexcoord0.xy + float2(texSourceSizeInv.x, 0);
                oTexcoord1.xy = oTexcoord0.xy + texSourceSizeInv;
                oTexcoord1.zw = oTexcoord0.xy + float2(0, texSourceSizeInv.y);
            }

            float4 SumLumPS(in float4 coord0 : TEXCOORD0, in float4 coord1 : TEXCOORD1) : SV_Target
            {
                float4 color = 0;
                color += texSource.SampleLevel(PointClamp, coord0.xy, texSourceLevel);
                color += texSource.SampleLevel(PointClamp, coord0.zw, texSourceLevel);
                color += texSource.SampleLevel(PointClamp, coord1.xy, texSourceLevel);
                color += texSource.SampleLevel(PointClamp, coord1.zw, texSourceLevel);
                color *= 0.25;

                return color;
            }

            float SumLumLogPS(in float4 coord0 : TEXCOORD0, in float4 coord1 : TEXCOORD1) : SV_Target
            {
                float color = 0;
                color += log(max(luminance(texSource.SampleLevel(PointClamp, coord0.xy, 0).rgb), 1e-6));
                color += log(max(luminance(texSource.SampleLevel(PointClamp, coord0.zw, 0).rgb), 1e-6));
                color += log(max(luminance(texSource.SampleLevel(PointClamp, coord1.xy, 0).rgb), 1e-6));
                color += log(max(luminance(texSource.SampleLevel(PointClamp, coord1.zw, 0).rgb), 1e-6));
                color *= 0.25;

                return color;
            }

            float AvgLuminancePS(in float4 coord0 : TEXCOORD0, in float4 coord1 : TEXCOORD1) : SV_Target
            {
                float color = texSource.SampleLevel(PointClamp, coord0.xy, 8).r;
                float adaptedLum = texLumAve.SampleLevel(PointClamp, float2(0.5,0.5), 0).r;
                return CalcAdaptedLum(adaptedLum, exp(color), delta);
            }

            void GenerateBloomVS(
                in float4 Position : POSITION0,
                out float4 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                float avgLum = texLumAve.SampleLevel(PointClamp, float2(0, 0), 0).r;

                oPosition = Position;
                oTexcoord.xy = PosToCoord(Position.xy);
                oTexcoord.zw = ComputeExposureISO(avgLum);
            }

            float4 GenerateBloomPS(in float4 coord : TEXCOORD0) : SV_Target
            {
                float4 color = texSource.SampleLevel(PointClamp, coord.xy, 0) * exposure * coord.z;
                return max(0, (color - bloomThreshold) * bloomIntensity);
            }

            void BloomBlurVS(
                in float4 Position : POSITION0,
                out float2 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord = PosToCoord(Position.xy);
            }

            float4 BloomBlurPS(in float2 coord : TEXCOORD0) : SV_Target
            {
            	float2 coords = coord - texSourceSizeInv * 4.0;

                float4 color = 0;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeights[0]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeights[1]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeights[2]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeights[3]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeights[4]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeights[5]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeights[6]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeights[7]; coords += texSourceSizeInv;
                color += texSource.SampleLevel(PointClamp, coords, texSourceLevel) * bloomWeights[8];

                return color;
            }

            float4 BloomCombinePS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float3 bloom = 0;
                bloom += texSource.SampleLevel(LinearClamp, coord.xy, 0).rgb * bloomFactors[0];
                bloom += texSource.SampleLevel(LinearClamp, coord.xy, 1).rgb * bloomFactors[1];
                bloom += texSource.SampleLevel(LinearClamp, coord.xy, 2).rgb * bloomFactors[2];
                bloom += texSource.SampleLevel(LinearClamp, coord.xy, 3).rgb * bloomFactors[3];
                bloom += texSource.SampleLevel(LinearClamp, coord.xy, 4).rgb * bloomFactors[4];

                return float4(bloom, 0);
            }

            float4 HDRTongMappingPS(in float4 coord : TEXCOORD0) : SV_Target
            {
                float3 bloom = texBloom.SampleLevel(PointClamp, coord.xy, 0).rgb;
                float3 color = texSource.SampleLevel(PointClamp, coord.xy, 0).rgb;

                color += bloom;
                color *= exposure * coord.z;
                color = ColorToneMapping(color);
                color = linear2srgb(color);
                color = ColorBanding(color, coord.xy);

                return float4(color, luminance(color));
            }
        ]]>
    </shader>
    <technique name="SumLum">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="SumLumVS" />
            <state name="fragment" value="SumLumPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="SumLumLog">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="SumLumVS" />
            <state name="fragment" value="SumLumLogPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="AvgLuminance">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="SumLumVS" />
            <state name="fragment" value="AvgLuminancePS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="GenerateBloom">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="GenerateBloomVS" />
            <state name="fragment" value="GenerateBloomPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="BlurBloom">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="BloomBlurVS" />
            <state name="fragment" value="BloomBlurPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="BloomCombine">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="BloomBlurVS" />
            <state name="fragment" value="BloomCombinePS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
    <technique name="FimicTongMapping">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="GenerateBloomVS" />
            <state name="fragment" value="HDRTongMappingPS" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
</effect>