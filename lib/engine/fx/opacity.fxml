<?xml version='1.0'?>
<effect language="glsl">
    <include name="sys:fx/Gbuffer.fxml"/>
    <parameter name="matModel" semantic="matModel" />
    <parameter name="matModelInverseTranspose" semantic="matModelInverseTranspose" />
    <parameter name="matView" semantic="matView"/>
    <parameter name="matViewProject" semantic="matViewProject"/>
    <parameter name="diffuse" type="float4" />
    <parameter name="specular" type="float4" />
    <parameter name="shininess" type="float" />
    <parameter name="texDiffuse" type="texture"/>
    <parameter name="texSpecular" type="texture" />
    <shader>
        <![CDATA[
            uniform float4x4 matModel;
            uniform float4x4 matModelInverseTranspose;
            uniform float4x4 matView;
            uniform float4x4 matViewProject;

            uniform float shininess;
            uniform float4 diffuse;
            uniform float4 specular;

            uniform Texture2D texDiffuse;
            uniform Texture2D texSpecular;

            void OpaqueVS(
                in float4 Position : POSITION,
                in float4 Normal : NORMAL,
                in float4 Texcoord : TEXCOORD0,
                out float2 oCoord  : TEXCOORD0,
                out float4 oNormal : TEXCOORD1,
                out float4 oPosition : SV_Position)
            {
                oCoord = Texcoord.xy;
                oNormal = mul(Normal, matModelInverseTranspose);
                oNormal = mul(float4(oNormal.xyz, 0.0), matView);
                oPosition = mul(mul(Position, matModel), matViewProject);
            }

            void OpaquePS(
                in float2 coord  : TEXCOORD0,
                in float4 normal : TEXCOORD1,
                out float4 FragData0 : SV_Target0,
                out float4 FragData1 : SV_Target1)
            {
                float4 albedo;
                float3 spec;

                if (diffuse.w > 0.0f)
                    albedo = diffuse;
                else
                    albedo = texDiffuse.Sample(PointClamp, float2(coord.x, 1.0f - coord.y));

                if (specular.w > 0.0f)
                    spec = specular.rgb;
                else
                    spec = texSpecular.Sample(PointClamp, coord).rgb;

                FragData0 = StoreGBufferRT0(srgb2linear(albedo), spec);
                FragData1 = StoreGBufferRT1(normalize(normal.xyz), shininess);
            }
        ]]>
    </shader>
    <technique name="opaque">
        <pass name="opaque">
            <state name="vertex" value="OpaqueVS"/>
            <state name="fragment" value="OpaquePS"/>

            <state name="primitive" value="triangle" />

            <state name="cullmode" value="none"/>
        </pass>
    </technique>
</effect>