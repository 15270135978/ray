<?xml version='1.0'?>
<effect language="hlsl">
    <include name="sys:fx/Gbuffer.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <parameter name="matModelViewProject" type="float4x4" semantic="matModelViewProject" />
    <parameter name="matModelInverseTranspose" type="float4x4" semantic="matModelInverseTranspose" />
    <parameter name="matView" type="float4x4" semantic="matView"/>
    <parameter name="diffuse" type="float3" />
    <parameter name="specular" type="float" />
    <parameter name="shininess" type="float" />
    <shader>
        <![CDATA[
            void OpaqueVS(
                in float4 Position : POSITION,
                in float4 Normal : NORMAL,
                in float4 Texcoord : TEXCOORD0,
                out float2 oCoord  : TEXCOORD0,
                out float4 oNormal : TEXCOORD1,
                out float3 oDiffuse : TEXCOORD2,
                out float4 oPosition : SV_Position)
            {
                oCoord = Texcoord.xy;
                oDiffuse = srgb2linear(diffuse);
                oNormal = mul(Normal, matModelInverseTranspose);
                oNormal = mul(float4(oNormal.xyz, 0.0), matView);
                oPosition = mul(Position, matModelViewProject);
            }

            void OpaquePS(
                in float2 coord  : TEXCOORD0,
                in float4 normal : TEXCOORD1,
                in float3 diffuse : TEXCOORD2,
                out float4 fragData0 : SV_Target0,
                out float4 fragData1 : SV_Target1)
            {
                fragData0 = StoreGBufferRT0(diffuse, specular);
                fragData1 = StoreGBufferRT1(normalize(normal.xyz), shininess);
            }
        ]]>
    </shader>
    <technique name="opaque">
        <pass name="p0">
            <state name="inputlayout" value="POS3F_N3F_UV2F"/>
            <state name="vertex" value="OpaqueVS"/>
            <state name="fragment" value="OpaquePS"/>
            <state name="primitive" value="triangle" />
            <state name="cullmode" value="none"/>
            <state name="stencilTest" value="true"/>
            <state name="stencilPass" value="replace"/>
            <state name="stencilTwoPass" value="replace"/>
        </pass>
    </technique>
</effect>