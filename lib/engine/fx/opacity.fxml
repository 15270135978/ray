<?xml version='1.0'?>
<effect language="hlsl">
    <include name="sys:fx/Gbuffer.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <parameter name="matModelViewProject" type="float4x4" semantic="matModelViewProject" />
    <parameter name="matModelInverseTranspose" type="float4x4" semantic="matModelInverseTranspose" />
    <parameter name="matView" type="float4x4" semantic="matView"/>
    <parameter name="quality" type="float4"/>
    <parameter name="diffuse" type="float3"/>
    <parameter name="specular" type="float"/>
    <parameter name="shininess" type="float"/>
    <parameter name="texDiffuse" type="texture2D"/>
    <parameter name="texSpecular" type="texture2D" />
    <parameter name="texNormal" type="texture2D" />
    <shader>
        <![CDATA[
            float3 SphereNormalMap(Texture2D normal, float2 coord)
            {
                float3 bump;
                bump.xy = normal.Sample(PointClamp, coord).gr * 2.0 - 1.0;
                bump.z = sqrt(1.0 - bump.x * bump.x - bump.y * bump.y);
                return normalize(bump);
            }

            float3 GetNormal(Texture2D normal, float2 coord, float quality)
            {
                if (quality > 0.5)
                    return SphereNormalMap(normal, coord);
                else
                    return normal.Sample(PointClamp, coord).rgb;
            }

            void OpaqueVS(
                in float4 Position : POSITION,
                in float4 Normal : NORMAL,
                in float2 Texcoord : TEXCOORD,
                out float4 oNormal : TEXCOORD0,
                out float2 oTexcoord : TEXCOORD1,
                out float4 oPosition : SV_Position)
            {
                oNormal = mul(Normal, matModelInverseTranspose);
                oNormal = mul(float4(oNormal.xyz, 0.0), matView);
                oTexcoord = Texcoord;
                oPosition = mul(Position, matModelViewProject);
            }

            void OpaquePS(
                in float3 iNormal : TEXCOORD0,
                in float2 iTexcoord : TEXCOORD1,
                out float4 fragData0 : SV_Target0,
                out float4 fragData1 : SV_Target1)
            {
                float3 albedo = quality.r > 0.0 ? texDiffuse.Sample(PointClamp, iTexcoord).rgb : diffuse.rgb;
                float3 normal = quality.g > 0.0 ? GetNormal(texNormal, iTexcoord, quality.g) : iNormal;

                fragData0 = StoreGBufferRT0(srgb2linear(albedo), specular);
                fragData1 = StoreGBufferRT1(normalize(normal.xyz), shininess);
            }
        ]]>
    </shader>
    <technique name="opaque">
        <pass name="p0">
            <state name="inputlayout" value="POS3F_N3F_UV2F"/>
            <state name="vertex" value="OpaqueVS"/>
            <state name="fragment" value="OpaquePS"/>
            <state name="primitive" value="triangle" />
            <state name="stencilTest" value="true"/>
            <state name="stencilPass" value="replace"/>
            <state name="stencilTwoPass" value="replace"/>
        </pass>
    </technique>
</effect>