<?xml version='1.0'?>
<effect language="hlsl">
    <include name="sys:fx/Gbuffer.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <parameter name="texSource" type="texture2D" />
    <parameter name="texDepthLinear" type="texture2D" semantic="DepthLinearMap"/>
    <parameter name="blurFactor" type="float3"/>
    <parameter name="texMRT0" type="texture2D" semantic="DiffuseMap" />
    <parameter name="texMRT1" type="texture2D" semantic="NormalMap" />
    <parameter name="texMRT2" type="texture2D" semantic="Gbuffer3Map" />
    <parameter name="matProjectInverse" type="float4x4" semantic="matProjectInverse" />
    <shader name="vertex">
        <![CDATA[
        void PostProcessVS(
            in float4 Position : POSITION,
            out float2 oTexcoord : TEXCOORD0,
            out float3 oViewDir  : TEXCOORD1,
            out float4 oPosition : SV_Position)
        {
            oPosition = Position;
            oViewDir  = -mul(matProjectInverse, Position).xyz;
            oTexcoord = PosToCoord(Position.xy);
        }

        float3 GuassBlurPS(in float4 coord : TEXCOORD0, in float4 viewdir : TEXCOORD1) : SV_Target
        {
            const float offsets[6] = { 0.352, 0.719, 1.117, 1.579, 2.177, 3.213 };

            const float3 profileVarArr[2] =
            {
                float3( 3.3, 2.8, 1.4 ),  // marble
                float3( 3.3, 1.4, 1.1 )   // skin
            };

            const float4 profileSpikeRadArr[2] =
            {
                float4( 0.03, 0.03, 0.08, 8.0 ),  // marble
                float4( 0.015, 0.020, 0.025, 1.0) // skin
            };

            float4 MRT0 = texMRT0.Sample(PointClamp, coord.xy);
            float4 MRT1 = texMRT1.Sample(PointClamp, coord.xy);
            float4 MRT2 = texMRT2.Sample(PointClamp, coord.xy);

            MaterialParam material;
            DecodeGbuffer(MRT0, MRT1, MRT2, material);

            float3 V = normalize(viewdir);
            float3 P = restorePosition(texDepthLinear, coord.xy, V);

            float4 colorM = texSource.Sample(PointClamp, coord.xy);
            float depthM = texDepthLinear.Sample(PointClamp, coord.xy).r;

            if (material.lightModel != LIGHTINGMODEL_TRANSMITTANCE)
            {
                return colorM;
            }

            float perspectiveScaleX = dot(normalize(material.normal.xz), normalize(-P.xz));
            float perspectiveScaleY = dot(normalize(material.normal.yz), normalize(-P.yz));
            float perspectiveScale = max((blurFactor.x > 0.001) ? perspectiveScaleX : perspectiveScaleY, 0.3);

            float radius = 0.0055 * profileSpikeRadArr[0].w;
            float2 finalStep = blurFactor.xy * perspectiveScale * radius / (depthM * blurFactor.z);

            float3 blurFalloff = -1.0f / (2 * profileVarArr[0]);

            float3 totalWeight = 1.0;
            float4 totalColor = colorM;

            [unroll]
            for (int i = 0; i < 2; i++)
            {
                [unroll]
                for (int j = 0; j < 6; j++)
                {
                    float2 offset = coord.xy + offsets[j] / 5.5 * finalStep;

                    float sampleDepth = texDepthLinear.Sample(PointClamp, offset).r;
                    float3 sampleColor = texSource.Sample(PointClamp, offset).rgb;

                    float depthDiff = abs(sampleDepth - depthM) * 1000 * blurFactor.z;

                    float3 weight = max(0, exp((offsets[j] * offsets[j] + depthDiff * depthDiff) * blurFalloff));

                    totalWeight += weight;
                    totalColor.rgb += weight * sampleColor;
                }

                finalStep *= -1;
            }

            totalColor.rgb /= totalWeight;

            return lerp(totalColor, colorM.rgb, profileSpikeRadArr[0].rgb );
        }
        ]]>
    </shader>
    <technique name="blur">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>

            <state name="vertex" value="PostProcessVS"/>
            <state name="fragment" value="GuassBlurPS"/>

            <state name="cullmode" value="none" />

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
</effect>