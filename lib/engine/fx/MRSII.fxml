<?xml version='1.0'?>
<effect language="hlsl">
    <include name="sys:fx/GBuffer.fxml"/>
    <include name="sys:fx/lighting.fxml"/>
    <include name="sys:fx/inputlayout.fxml"/>
    <parameter name="texColor" type="texture2D"/>
    <parameter name="texNormal" type="texture2D"/>
    <parameter name="texDepthLinear" type="texture2D"/>
    <parameter name="texVPLBuffer" type="texture2D"/>
    <parameter name="texMRT0" type="texture2D"/>
    <parameter name="texMRT1" type="texture2D"/>
    <parameter name="lightOuterInner" type="float2"/>
    <parameter name="lightAttenuation" type="float3"/>
    <parameter name="offset" type="float2"/>
    <parameter name="VPLCountGridOffsetDelta" type="float4"/>
    <parameter name="matProject" type="float4x4" semantic="matProject"/>
    <parameter name="matProjectInverse" type="float4x4" semantic="matProjectInverse"/>
    <parameter name="matModelViewProject" type="float4x4" semantic="matModelViewProject"/>
    <parameter name="shadowView2EyeView" type="float4x4"/>
    <parameter name="threshold" type="float2"/>
    <parameter name="mipmapLevel" type="int2"/>
    <parameter name="mipmapPass" type="int2"/>
    <shader>
        <![CDATA[
            void ScreenQuadVS(
                in float4 Position : POSITION,
                out float4 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord = PosToCoord(Position);
            }

            float4 RSM2VPLsSpotPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float instanceID = floor(coord.x * VPLCountGridOffsetDelta.x);
                float i = VPLCountGridOffsetDelta.y * frac(instanceID / VPLCountGridOffsetDelta.y);
                float j = floor(instanceID / VPLCountGridOffsetDelta.y);
                float2 RSMcoord = VPLCountGridOffsetDelta.w * float2(i, j) + VPLCountGridOffsetDelta.zz;

                float4 MRT0 = texColor.Sample(PointClamp, RSMcoord);
                float4 MRT1 = texNormal.Sample(PointClamp, RSMcoord);

                float specular = restoreSpecular(MRT0);
                float shininess = restoreShininess(MRT1);

                float3 N = restoreNormal(MRT1);
                float3 V = mul(matProjectInverse, float4(RSMcoord * 2.0 - 1.0, 0, 1)).xyz;
                float3 P = restorePosition(texDepthLinear, RSMcoord, V);
                float3 albedo = restoreDiffuse(MRT0);

                if (coord.y < 1 / 3.0f)
                {
                    float4 lighting = 0;
                    float spot = spotLighting(float3(0,0,0), float3(0,0,1), lightOuterInner, P);
                    if (spot > 0)
                    {
                        float nl = -N.z;
                        if (nl > 0)
                        {
                            float atten = attenuationTerm(float3(0, 0, 0), P, lightAttenuation) * spot * nl;
                            lighting = float4(albedo, atten * shininess);
                        }
                    }

                    return lighting;
                }
                else if (coord.y < 2 / 3.0f)
                {
                    float4 viewNormal = mul(shadowView2EyeView, float4(N, 0));
                    return float4(viewNormal.xyz, shininess);
                }
                else
                {
                    float4 viewPosition = mul(shadowView2EyeView, float4(P, 1));
                    viewPosition /= viewPosition.w;
                    return float4(viewPosition.xyz, specular);
                }
            }

           void GatherIndirectVS(
                in float4 Position : POSITION,
                out float4 oTexcoord : TEXCOORD0,
                out float3 oViewdir : TEXCOORD2,
                out float4 oPosition : SV_Position)
            {
                oPosition = Position;
                oTexcoord = PosToCoord(Position);
                oViewdir  = mul(matProjectInverse, Position).xyz;
            }

            float4 GatherIndirectPS(in float4 coord : TEXCOORD0, in float3 viewdir : TEXCOORD2) : SV_Target
            {
                float4 MRT0 = texMRT0.Sample(PointClamp, coord.xy);
                float4 MRT1 = texMRT1.Sample(PointClamp, coord.xy);

                float specular = restoreSpecular(MRT0);
                float shininess = restoreShininess(MRT1);

                float3 V = normalize(viewdir);
                float3 viewNormal = restoreNormal(MRT1);
                float3 viewPosition = restorePosition(texDepthLinear, coord.xy, V);

                float4 shading = 0;

                for (float i = 0; i < VPLCountGridOffsetDelta.x; i++)
                {
                    float index = i / VPLCountGridOffsetDelta.x;

                    float4 lightColor = texVPLBuffer.Sample(PointClamp, float2(index, 0.0f));
                    float4 lightNormal = texVPLBuffer.Sample(PointClamp, float2(index, 0.5f));
                    float4 lightPosition = texVPLBuffer.Sample(PointClamp, float2(index, 1.0f));
                    float3 lightDirection = normalize(lightPosition.xyz - viewPosition);

                    float4 lighting = 0;

                    float nl = max(0.0, dot(viewNormal, lightDirection));
                    if (nl > 0.0f)
                    {
                        lighting.rgb = brdfLambert(viewNormal, lightDirection, lightColor.xyz) * lightColor.w;
                        lighting *= attenuationTerm(viewPosition, lightPosition.xyz, float3(1, 0, 1));

                        shading += lighting;
                    }
                }

                return shading;
            }

            void GatherIndirectDebugVS(
                in float4 Position : POSITION,
                in uint instanceID : SV_InstanceID,
                out float4 oTexcoord : TEXCOORD0,
                out float4 oPosition : SV_Position)
            {
                float index = instanceID.x / VPLCountGridOffsetDelta.x;
                float4 lightPosition = texVPLBuffer.SampleLevel(PointClamp, float2(index, 1.0), 0);
                oTexcoord = float4(index, 0.0, 0.0, 0.0);
                oPosition = mul(matProject, Position * 0.05 + lightPosition);
            }

            float4 GatherIndirectDebugPS(in float4 coord0 : TEXCOORD0) : SV_Target
            {
                float4 lightColor = texVPLBuffer.Sample(PointClamp, coord0.xy);
                if (lightColor.w < 0.001)
                {
                    discard;
                }

                return lightColor;
            }

            float DepthDerivatePS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float2 w[9] = { float2(0, 0), float2(-1,  0), float2(-1,  1), float2(0, 1), float2( 1,  1), float2( 1,  0), float2(1,-1), float2( 0, -1), float2(-1, -1) };
                float maxDepth = texDepthLinear.Sample(PointClamp, coord).x;
                float minDepth = maxDepth;

                for (int i = 1; i < 9; ++i)
                {
                    float2 step = coord + w[i] * offset;
                    float depth = texDepthLinear.Sample(PointClamp, step).x;
                    maxDepth = max(maxDepth, depth);
                    minDepth = min(minDepth, depth);
                }

                return maxDepth - minDepth;
            }

            float DepthDerivateMipmapPS(in float2 coord : TEXCOORD) : SV_Target
            {
                float2 w[9] = { float2(0, 0), float2(-1,  0), float2(-1,  1), float2(0, 1), float2( 1,  1), float2( 1,  0), float2(1,-1), float2( 0, -1), float2(-1, -1) };
                float maxDepth = texDepthLinear.SampleLevel(PointClamp, coord, mipmapLevel.x).x;

                for (int i = 1; i < 9; ++i)
                {
                    float2 step = coord + w[i] * offset;
                    float depth = texDepthLinear.SampleLevel(PointClamp, step, mipmapLevel.x).x;
                    maxDepth = max(maxDepth, depth);
                }

                return maxDepth;
            }

            float4 NormalDerivatePS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float2 w[9] = { float2(0, 0), float2(-1,  0), float2(-1,  1), float2(0, 1), float2( 1,  1), float2( 1,  0), float2(1,-1), float2( 0, -1), float2(-1, -1) };

                float2 maxNormal = restoreNormal(texNormal.Sample(PointClamp, coord)).xy;
                float2 minNormal = maxNormal;

                for (int i = 1; i < 9; ++i)
                {
                    float2 step = coord + w[i] * offset;
                    float2 normal = restoreNormal(texNormal.Sample(PointClamp, step)).xy;
                    maxNormal = max(maxNormal, normal);
                    minNormal = min(minNormal, normal);
                }

                return float4(minNormal, maxNormal) * 0.5 + 0.5;
            }

            float4 NormalDerivateMipmapPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float2 w[9] = { float2(0, 0), float2(-1,  0), float2(-1,  1), float2(0, 1), float2( 1,  1), float2( 1,  0), float2(1,-1), float2( 0, -1), float2(-1, -1) };

                float4 minmax = texNormal.SampleLevel(PointClamp, coord, mipmapLevel.x);

                for (int i = 1; i < 9; ++i)
                {
                    float2 step = coord + w[i] * offset;
                    float4 normal = texNormal.SampleLevel(PointClamp, step, mipmapLevel.x);
                    minmax.xy = min(minmax.xy, normal.xy);
                    minmax.zw = max(minmax.zw, normal.zw);
                }

                return minmax;
            }

            float4 ComputeSubsplatStencilPS(in float2 coord : TEXCOORD0) : SV_Target
            {
                float depthThresh0 = threshold.x * (3.0 / mipmapLevel.x);
                float depthThresh1 = threshold.x * (3.0 / mipmapLevel.y);

                float depthDeriv0 = texDepthLinear.SampleLevel(PointClamp, coord, mipmapLevel.x).r;
                float depthDeriv1 = texDepthLinear.SampleLevel(PointClamp, coord, mipmapLevel.y).r;

                float4 minMaxNorm0 = texNormal.SampleLevel(PointClamp, coord, mipmapLevel.x);
                float4 minMaxNorm1 = texNormal.SampleLevel(PointClamp, coord, mipmapLevel.y);
                float normDeriv0 = max(minMaxNorm0.z - minMaxNorm0.x, minMaxNorm0.w - minMaxNorm0.y);
                float normDeriv1 = max(minMaxNorm1.z - minMaxNorm1.x, minMaxNorm1.w - minMaxNorm1.y);

                bool invalid0 = (normDeriv0 < -1) ? true : false;
                bool invalid1 = (normDeriv1 < -1) ? true : false;

                bool atCoarsestLevel = ( mipmapLevel.y > 2 ) ? true : false;
                bool atFinestLevel   = ( mipmapLevel.x <= 0.5 ) ? true : false;
                bool needRefinment = (depthDeriv0 > depthThresh0) || (normDeriv0 > threshold.y);
                bool coarseLevelSufficient = (depthDeriv1 <= depthThresh1) && (normDeriv1 <= threshold.y) && !invalid1;

                if (needRefinment && !atFinestLevel)
                    discard;

                if (coarseLevelSufficient && !atCoarsestLevel)
                    discard;

                if (invalid0)
                    discard;

                return 1;
            }

            float4 UpsamplingPS(float2 coord : TEXCOORD0) : SV_Target
            {
                float3 color0 = texColor.SampleLevel(PointClamp, coord, mipmapLevel.x).xyz;
                float3 color1 = texColor.SampleLevel(PointClamp, coord, mipmapLevel.y).xyz;

                return float4(color0 + color1, 0);
            }
        ]]>
    </shader>
    <technique name="RSM2VPLsSpot">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="ScreenQuadVS"/>
            <state name="fragment" value="RSM2VPLsSpotPS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="GatherIndirect">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="GatherIndirectVS"/>
            <state name="fragment" value="GatherIndirectPS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>
            <state name="blendalphasrc" value="one"/>
            <state name="blendalphadst" value="one"/>

            <state name="stencilTest" value="true"/>
            <state name="stencilFunc" value="notequal"/>
            <state name="stencilTwoFunc" value="notequal"/>
            <state name="stencilRef" value="0"/>
            <state name="stencilTwoRef" value="0"/>
        </pass>
    </technique>
    <technique name="GatherIndirectDebug">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="GatherIndirectDebugVS"/>
            <state name="fragment" value="GatherIndirectDebugPS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="DepthDerivate">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="ScreenQuadVS"/>
            <state name="fragment" value="DepthDerivatePS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="DepthDerivateMipmap">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="ScreenQuadVS"/>
            <state name="fragment" value="DepthDerivateMipmapPS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="NormalDerivate">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="ScreenQuadVS"/>
            <state name="fragment" value="NormalDerivatePS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="NormalDerivateMipmap">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="ScreenQuadVS"/>
            <state name="fragment" value="NormalDerivateMipmapPS"/>

            <state name="cullmode" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="ComputeSubsplatStencil">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="ScreenQuadVS"/>
            <state name="fragment" value="ComputeSubsplatStencilPS"/>

            <state name="cullmode" value="none"/>
            <state name="colormask" value="none"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="stencilTest" value="true"/>
            <state name="stencilPass" value="replace"/>
            <state name="stencilTwoPass" value="replace"/>
            <state name="stencilRef" value="1"/>
            <state name="stencilTwoRef" value="1"/>
        </pass>
    </technique>
    <technique name="Upsampling">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="ScreenQuadVS"/>
            <state name="fragment" value="UpsamplingPS"/>

            <state name="cullmode" value="none"/>
            <state name="colormask" value="rgb"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>
        </pass>
    </technique>
    <technique name="UpsamplingWithBlend">
        <pass name="p0">
            <state name="inputlayout" value="POS3F"/>
            <state name="vertex" value="ScreenQuadVS"/>
            <state name="fragment" value="UpsamplingPS"/>

            <state name="cullmode" value="none"/>
            <state name="colormask" value="rgb"/>

            <state name="depthtest" value="false"/>
            <state name="depthwrite" value="false"/>

            <state name="blend" value="true"/>
            <state name="blendsrc" value="one"/>
            <state name="blenddst" value="one"/>
            <state name="blendalphasrc" value="one"/>
            <state name="blendalphadst" value="one"/>

            <state name="stencilTest" value="true"/>
            <state name="stencilFunc" value="notequal"/>
            <state name="stencilTwoFunc" value="notequal"/>
            <state name="stencilRef" value="0"/>
            <state name="stencilTwoRef" value="0"/>
        </pass>
    </technique>
</effect>