CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS On)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)

INCLUDE(CheckTypeSize)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckCSourceCompiles)

ENABLE_TESTING()
ENABLE_LANGUAGE(CXX)

PROJECT(ray)

SET(ENGINE_DIR ${PROJECT_SOURCE_DIR}/lib/engine)
SET(DEPENDENCIES_PATH ${PROJECT_SOURCE_DIR}/contrib)
SET(TOOLS_PATH ${PROJECT_SOURCE_DIR}/tools)
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

OPTION(BUILD_DEBUG_MODE "ON for debug or OFF for release" ON)
OPTION(BUILD_GLEW_SHARED  "on for use off for ignore" OFF)
OPTION(BUILD_MYGUI  "on for use off for ignore" ON)

IF(ANDROID_ABI)
    OPTION(BUILD_PLATFORM_ANDROID "on for use off for ignore" ON)
ELSE()
    OPTION(BUILD_PLATFORM_WINDOWS "on for use off for ignore" ON)
    OPTION(BUILD_PLATFORM_LINUX "on for use off for ignore" OFF)
    OPTION(BUILD_PLATFORM_IPHONE "on for use off for ignore" OFF)
    OPTION(BUILD_PLATFORM_ANDROID "on for use off for ignore" OFF)
ENDIF()

IF(BUILD_PLATFORM_ANDROID)
    OPTION(BUILD_OPENGL_ES "on for DX11 off for ogl" ON)
ELSE()
    OPTION(BUILD_OPENGL "on for DX11 off for ogl" ON)
    OPTION(BUILD_OPENGL_ES "on for DX11 off for ogl" OFF)
    OPTION(BUILD_DIRECTX_11 "on for DX11 off for ogl" OFF)
ENDIF()

OPTION(BUILD_SSE "on for use off for ignore" OFF)
OPTION(BUILD_UNICODE "on for unicode off for ascii" OFF)
OPTION(BUILD_INPUT "on for use off for ignore" ON)
OPTION(BUILD_BASEGAME "on for use off for ignore" ON)
OPTION(BUILD_SCRIPT "on for use off for ignore" OFF)
OPTION(BUILD_PHYSIC "on for use off for ignore" ON)
OPTION(BUILD_GUI "on for use off for ignore" ON)
OPTION(BUILD_RENDERER "on for use off for ignore" ON)
OPTION(BUILD_SOUND "on for use off for ignore" ON)

IF(BUILD_PLATFORM_ANDROID)
    ADD_DEFINITIONS(-DANDROID)
    ADD_DEFINITIONS(-D_BUILD_PLATFORM_ANDROID)

    ADD_DEFINITIONS(-D_BUILD_OPENGL_ES)
ELSEIF(BUILD_PLATFORM_LINUX)
    ADD_DEFINITIONS(-DLINUX)
    ADD_DEFINITIONS(-D_BUILD_PLATFORM_LINUX)

    IF(BUILD_DIRECTX_11)
        ADD_DEFINITIONS(-D_BUILD_DIRECTX_11)
    ELSEIF(BUILD_OPENGL)
        ADD_DEFINITIONS(-D_BUILD_OPENGL)
    ELSEIF(BUILD_OPENGL_ES)
        ADD_DEFINITIONS(-D_BUILD_OPENGL_ES)
    ENDIF()

ELSEIF(BUILD_PLATFORM_APPLE)
    ADD_DEFINITIONS(-DAPPLE)
    ADD_DEFINITIONS(-D_BUILD_PLATFORM_APPLE)

    IF(BUILD_DIRECTX_11)
        ADD_DEFINITIONS(-D_BUILD_DIRECTX_11)
    ELSEIF(BUILD_OPENGL)
        ADD_DEFINITIONS(-D_BUILD_OPENGL)
    ELSEIF(BUILD_OPENGL_ES)
        ADD_DEFINITIONS(-D_BUILD_OPENGL_ES)
    ENDIF()

ELSEIF(BUILD_PLATFORM_WINDOWS)

    ADD_DEFINITIONS(-DWINDOWS)
    ADD_DEFINITIONS(-D_BUILD_PLATFORM_WINDOWS)

    IF(BUILD_DIRECTX_11)
        ADD_DEFINITIONS(-D_BUILD_DIRECTX_11)
    ELSEIF(BUILD_OPENGL)
        ADD_DEFINITIONS(-D_BUILD_OPENGL)
    ELSEIF(BUILD_OPENGL_ES)
        ADD_DEFINITIONS(-D_BUILD_OPENGL_ES)
    ENDIF()
ENDIF()

IF(BUILD_DEBUG_MODE)
    SET(CMAKE_BUILD_TYPE DEBUG)
ELSE()
    SET(CMAKE_BUILD_TYPE RELEASE)
ENDIF()

IF(BUILD_UNICODE)
    ADD_DEFINITIONS(-DUNICODE)
    ADD_DEFINITIONS(-D_UNICODE)
ENDIF()

IF(MINGW OR UNIX)
    IF(MINGW)
        SET(PLATFORM_NAME "mingw")
    ELSE()
        SET(PLATFORM_NAME "linux")
    ENDIF()

    IF(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64")
        SET(LIBRARY_OUT_NAME "64")
    ELSE()
        SET(LIBRARY_OUT_NAME "86")
    ENDIF()

ELSEIF(WIN32 OR WIN64 OR MSVC)
    SET(PLATFORM_NAME "win")

    IF(CMAKE_GENERATOR MATCHES "Win64")
        SET(WIN64 TRUE)
        SET(LIBRARY_OUT_NAME "64")
    ELSEIF(CMAKE_GENERATOR MATCHES "ARM")
        SET(LIBRARY_OUT_NAME "arm")
    ELSE()
        SET(LIBRARY_OUT_NAME "32")
    ENDIF()

    #ADD_DEFINITIONS(-DUNICODE -D_UNICODE)
    ADD_DEFINITIONS(-D_WINDOWS)
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)

    SET(COMPILER_NAME "vc")
    IF(MSVC_VERSION GREATER 1600)
        SET(COMPILER_NAME "11")
    ELSEIF(MSVC_VERSION GREATER 1500)
        SET(COMPILER_NAME "10")
    ELSEIF(MSVC_VERSION GREATER 1400)
        SET(COMPILER_NAME "9")
    ENDIF()

ENDIF()

# 指定库文件输出路径
SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib/binaries/${PLATFORM_NAME}${LIBRARY_OUT_NAME})
# 设置编译文件后缀
SET(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "add a postfix, usually d on windows")
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")
SET(CMAKE_MINSIZEREL_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows")

MACRO(SET_TARGET_ATTRIBUTE target directory)
    SET_TARGET_PROPERTIES(${target} PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH}
        ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${LIBRARY_OUTPUT_PATH}
        ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${LIBRARY_OUTPUT_PATH}
        ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${LIBRARY_OUTPUT_PATH}
        ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${LIBRARY_OUTPUT_PATH}
        LIBRARY_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH}
        LIBRARY_OUTPUT_DIRECTORY_DEBUG ${LIBRARY_OUTPUT_PATH}
        LIBRARY_OUTPUT_DIRECTORY_RELEASE ${LIBRARY_OUTPUT_PATH}
        LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${LIBRARY_OUTPUT_PATH}
        LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${LIBRARY_OUTPUT_PATH}
        RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH}
        RUNTIME_OUTPUT_DIRECTORY_DEBUG ${LIBRARY_OUTPUT_PATH}
        RUNTIME_OUTPUT_DIRECTORY_RELEASE ${LIBRARY_OUTPUT_PATH}
        RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${LIBRARY_OUTPUT_PATH}
        RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${LIBRARY_OUTPUT_PATH}
    )
    SET_TARGET_PROPERTIES(${target} PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
    SET_TARGET_PROPERTIES(${target} PROPERTIES PROJECT_LABEL ${target})
    SET_TARGET_PROPERTIES(${target} PROPERTIES FOLDER ${directory})
ENDMACRO()

IF(MINGW OR UNIX)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic")

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W")

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -finput-charset=utf-8")

    IF(SSE)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse")
    ELSEIF(SSE2)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2")
    ELSEIF(SSE3)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse3")
    ELSEIF(SSE4)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse3")
    ENDIF()

ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
    # 多处理器编译
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

    # 运行时类型信息
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GR")

    # SEH
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHa")

    # 快速的浮点模型
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:fast")

    # 静态库
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")

    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ob2")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ot")
    #SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Oi")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")

    IF(BUILD_SSE)
        SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /arch:SSE")
    ENDIF()

    # 设置错误提示
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Wall")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4061") # 枚举数没有被 case 标签显式处理
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4100") # 未引用的形参
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4191") # 不安全的函数转换
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4201")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4242") # 从“const int”转换到“BYTE”，可能丢失数据
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4244") # 从“int”转换到“unsigned char”，可能丢失数据
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4251") # needs to have dll-interface to be used by clients of class
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4265") # 类有虚函数，但析构函数不是虚拟的
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4267") # 从“size_t”转换到“int”，可能丢失数据
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4275") #  非 dll 接口 class“std::exception”用作 dll 接口 class“MyGUI::Exception”的基
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4305")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4350") # 行为更改
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4355") # “this”: 用于基成员初始值设定项列表
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4365") # 不安全的整数转换
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4371") # 类的布局可能与早期版本的编译器有所不同
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4435") # 虚拟继承
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4480")
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4481")

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4514") # “func” 未引用的内联函数已移除
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4548")
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4571")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4625") #未能生成复制构造函数，因为基类复制构造函数不可访问或已被删除
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4626") #未能生成赋值运算符，因为基类赋值运算符不可访问或已被删除
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4640") #本地静态对象的结构是非线程安全的
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4668") # 没有将“symbol”定义为预处理器宏，用“0”替换“directives”
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4710") # “function”: 函数未内联
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4711") # "function":自动内联
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4820") # “bytes”字节填充添加在构造“member_name”之后
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4836")
    #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4986") # 异常规范与前面的声明不匹配
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4996") # _CRT_SECURE_NO_WARNINGS

    LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})
    IF(CMAKE_GENERATOR MATCHES "Win64")
        LINK_DIRECTORIES($ENV{DXSDK_DIR}/Lib/x64)
    ELSE()
        LINK_DIRECTORIES($ENV{DXSDK_DIR}/Lib/x86)
    ENDIF()
ENDIF()

# 添加依赖库
ADD_SUBDIRECTORY(contrib)

# 添加项目
ADD_SUBDIRECTORY(source)

# 例子
ADD_SUBDIRECTORY(sample)

# 工具
ADD_SUBDIRECTORY(tools)